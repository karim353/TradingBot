# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫ TradingBot
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫ TradingBot..." -ForegroundColor Green
Write-Host ""

$baseUrl = "http://localhost:5000"
$endpoints = @(
    @{ Path = "/"; Name = "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" },
    @{ Path = "/health"; Name = "Health Check" },
    @{ Path = "/metrics"; Name = "Prometheus –º–µ—Ç—Ä–∏–∫–∏" }
)

foreach ($endpoint in $endpoints) {
    $url = "$baseUrl$($endpoint.Path)"
    Write-Host "üîó –ü—Ä–æ–≤–µ—Ä—è—é $($endpoint.Name): $url" -ForegroundColor Cyan
    
    try {
        $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 5
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ $($endpoint.Name) –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $($response.StatusCode))" -ForegroundColor Green
            
            if ($endpoint.Path -eq "/metrics") {
                $metricsCount = ($response.Content -split "`n" | Where-Object { $_ -match "^[^#]" -and $_ -notmatch "^\s*$" }).Count
                Write-Host "   üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç—Ä–∏–∫: $metricsCount" -ForegroundColor Yellow
            }
        } else {
            Write-Host "‚ö†Ô∏è $($endpoint.Name) –≤–µ—Ä–Ω—É–ª –∫–æ–¥: $($response.StatusCode)" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "‚ùå $($endpoint.Name) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host ""
}

Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" -ForegroundColor Green
Write-Host ""
Write-Host "üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dotnet run" -ForegroundColor Yellow
Write-Host "üí° –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: .\start_metrics.ps1" -ForegroundColor Yellow
