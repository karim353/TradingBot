using TradingBot.Services.Interfaces;
using System.Diagnostics;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Builder;

namespace TradingBot.Middleware;

/// <summary>
/// Middleware –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
/// </summary>
public class MetricsMiddleware
{
    private readonly RequestDelegate _next;
    private readonly IMetricsService _metricsService;
    private readonly ILogger<MetricsMiddleware> _logger;

    public MetricsMiddleware(
        RequestDelegate next,
        IMetricsService metricsService,
        ILogger<MetricsMiddleware> logger)
    {
        _next = next;
        _metricsService = metricsService;
        _logger = logger;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        var stopwatch = Stopwatch.StartNew();
        var startTime = DateTime.UtcNow;

        try
        {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            _logger.LogDebug("üì• HTTP –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∞—Ç: {Method} {Path}", 
                context.Request.Method, context.Request.Path);

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            var concurrentRequests = GetConcurrentRequests();
            _metricsService.RecordConcurrentRequests(concurrentRequests);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (context.User?.Identity?.IsAuthenticated == true)
            {
                var userId = GetUserIdFromContext(context);
                if (userId.HasValue)
                {
                    _metricsService.RecordUserActivity(userId.Value, $"http_{context.Request.Method.ToLower()}");
                }
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π middleware
            await _next(context);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            stopwatch.Stop();
            var duration = stopwatch.Elapsed;
            var operation = GetOperationName(context.Request);

            _metricsService.RecordRequestDuration(operation, duration);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            _logger.LogDebug("‚úÖ HTTP –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω: {Method} {Path} –∑–∞ {Duration}ms", 
                context.Request.Method, context.Request.Path, duration.TotalMilliseconds);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
            if (IsNotificationRequest(context.Request))
            {
                var notificationType = GetNotificationType(context.Request);
                _metricsService.RecordNotificationDeliveryTime(notificationType, duration);
            }
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            var duration = stopwatch.Elapsed;
            var operation = GetOperationName(context.Request);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–∫–∏
            _metricsService.RecordRequestDuration(operation, duration);
            _metricsService.IncrementErrorCounter("http_request");
            _metricsService.RecordExceptionCount(ex.GetType().Name, "http_middleware");

            _logger.LogError(ex, "‚ùå HTTP –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {Method} {Path} –∑–∞ {Duration}ms", 
                context.Request.Method, context.Request.Path, duration.TotalMilliseconds);

            // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            throw;
        }
        finally
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            var finalConcurrentRequests = GetConcurrentRequests() - 1;
            if (finalConcurrentRequests >= 0)
            {
                _metricsService.RecordConcurrentRequests(finalConcurrentRequests);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (context.User?.Identity?.IsAuthenticated == true)
            {
                var userId = GetUserIdFromContext(context);
                if (userId.HasValue)
                {
                    var sessionDuration = DateTime.UtcNow - startTime;
                    _metricsService.RecordUserSessionDuration(userId.Value, sessionDuration);
                }
            }
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
    /// </summary>
    private string GetOperationName(HttpRequest request)
    {
        var path = request.Path.Value?.ToLower() ?? "";
        var method = request.Method.ToLower();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏ –∏ –º–µ—Ç–æ–¥–∞
        if (path.Contains("/metrics"))
            return "get_metrics";
        if (path.Contains("/health"))
            return "health_check";
        if (path.Contains("/trades"))
            return method == "get" ? "get_trades" : "modify_trades";
        if (path.Contains("/users"))
            return "user_management";
        if (path.Contains("/notifications"))
            return "notification_service";
        if (path.Contains("/api/"))
            return "api_request";
        if (path.Contains("/webhook"))
            return "webhook_processing";

        return $"{method}_{path.Replace("/", "_").TrimStart('_')}";
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    /// </summary>
    private long? GetUserIdFromContext(HttpContext context)
    {
        try
        {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if (context.Request.Headers.TryGetValue("X-User-Id", out var userIdHeader))
            {
                if (long.TryParse(userIdHeader, out var userId))
                    return userId;
            }

            // –ò–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (context.Request.Query.TryGetValue("userId", out var userIdQuery))
            {
                if (long.TryParse(userIdQuery, out var userId))
                    return userId;
            }

            // –ò–∑ claims –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userIdClaim = context.User?.FindFirst("userId")?.Value;
            if (long.TryParse(userIdClaim, out var userIdFromClaim))
                return userIdFromClaim;

            return null;
        }
        catch
        {
            return null;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    /// </summary>
    private bool IsNotificationRequest(HttpRequest request)
    {
        var path = request.Path.Value?.ToLower() ?? "";
        return path.Contains("/notification") || 
               path.Contains("/webhook") || 
               path.Contains("/callback");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    private string GetNotificationType(HttpRequest request)
    {
        var path = request.Path.Value?.ToLower() ?? "";
        
        if (path.Contains("/telegram"))
            return "telegram_webhook";
        if (path.Contains("/notion"))
            return "notion_webhook";
        if (path.Contains("/price_alert"))
            return "price_alert";
        if (path.Contains("/trade_executed"))
            return "trade_executed";
        if (path.Contains("/system"))
            return "system_maintenance";
        
        return "other";
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    /// </summary>
    private int GetConcurrentRequests()
    {
        try
        {
            // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
            return Process.GetCurrentProcess().Threads.Count;
        }
        catch
        {
            return 0;
        }
    }
}

/// <summary>
/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ middleware
/// </summary>
public static class MetricsMiddlewareExtensions
{
    public static IApplicationBuilder UseMetricsMiddleware(this IApplicationBuilder builder)
    {
        return builder.UseMiddleware<MetricsMiddleware>();
    }
}
