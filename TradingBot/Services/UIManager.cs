using System;
using System.Collections.Generic;
using System.Linq;
using Telegram.Bot.Types.ReplyMarkups;
using TradingBot.Models;

namespace TradingBot.Services
{
    public class UIManager
    {
        // –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
        private readonly Dictionary<string, Dictionary<string, string>> _resources = new()
        {
            ["ru"] = new Dictionary<string, string>
            {
                ["welcome"] = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TradingBot 2.0!\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ —É—á—ë—Ç —Å–¥–µ–ª–æ–∫.\n–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ' –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.",
                ["onboarding_1"] = "üì• –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –≤—Ä—É—á–Ω—É—é.",
                ["onboarding_2"] = "üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥—Ä–∞—Ñ–∏–∫–∏ —ç–∫–≤–∏—Ç–∏.",
                ["onboarding_3"] = "‚öô –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è (—è–∑—ã–∫, —Ç–∏–∫–µ—Ä—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è).",
                ["main_menu"] = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                ["please_use_buttons"] = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
                ["error_occurred"] = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                ["trade_cancelled"] = "–í–≤–æ–¥ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω.",
                ["trade_saved"] = "–°–¥–µ–ª–∫–∞ {0} (PnL={1}%) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
                ["trade_saved_local"] = "–°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Notion.",
                ["error_saving_trade"] = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.",
                ["trade_expired"] = "–°–¥–µ–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                ["trade_deleted"] = "–°–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.",
                ["all_pending_cleared"] = "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –æ—á–∏—â–µ–Ω—ã.",
                ["no_trades"] = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–¥–µ–ª–∫–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
                ["invalid_input"] = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                ["invalid_pnl"] = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è PnL (–Ω–∞–ø—Ä–∏–º–µ—Ä, +5.25).",
                ["step_1"] = "üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 1/9: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä",
                ["step_2"] = "üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 2/9: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                ["step_3"] = "üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 3/9: –í–≤–µ–¥–∏—Ç–µ PnL",
                ["step_4"] = "üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 4/9: –í–≤–µ–¥–∏—Ç–µ Open Price",
                ["step_5"] = "üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú –®–∞–≥ 5/9: –í–≤–µ–¥–∏—Ç–µ Close Price",
                ["step_6"] = "üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú –®–∞–≥ 6/9: –í–≤–µ–¥–∏—Ç–µ Stop Loss",
                ["step_7"] = "üü©üü©üü©üü©üü©üü©üü©‚¨ú –®–∞–≥ 7/9: –í–≤–µ–¥–∏—Ç–µ Take Profit",
                ["step_8"] = "üü©üü©üü©üü©üü©üü©üü©üü© –®–∞–≥ 8/9: –í–≤–µ–¥–∏—Ç–µ Volume",
                ["step_9"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü© –®–∞–≥ 9/9: –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                ["trade_preview"] = "–¢–µ–∫—É—â–∞—è —Å–¥–µ–ª–∫–∞:\n–¢–∏–∫–µ—Ä: {0}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {1}\nPnL: {2}%\nOpen Price: {3}\nClose Price: {4}\nSL: {5}\nTP: {6}\nVolume: {7}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {8}",
                ["confirm_trade"] = "–í—Å—ë –≤–µ—Ä–Ω–æ?",
                ["edit_field"] = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                ["pending_trades"] = "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n{0}",
                ["no_pending_trades"] = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.",
                ["stats_menu"] = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
                ["stats_result"] = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {0}:\n–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {1}\n–û–±—â–∏–π PnL: {2}%\n–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {3}\n–£–±—ã—Ç–æ—á–Ω—ã—Ö: {4}\nWin Rate: {5}%",
                ["advanced_stats"] = "–°–¥–µ–ª–æ–∫: {0}\n–û–±—â–∏–π PnL: {1}%\n–°—Ä–µ–¥–Ω–∏–π PnL: {2}%\n–õ—É—á—à–∏–π: {3}%\n–•—É–¥—à–∏–π: {4}%\nWin Rate: {5}%",
                ["date_label"] = "–î–∞—Ç–∞",
                ["pnl_label"] = "–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π PnL",
                ["equity_curve"] = "–ö—Ä–∏–≤–∞—è —ç–∫–≤–∏—Ç–∏",
                ["error_graph"] = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.",
                ["settings_menu"] = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
                ["settings_updated"] = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                ["settings_reset"] = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.",
                ["help_menu"] = "–ü–æ–º–æ—â—å:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
                ["support"] = "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
                ["whats_new"] = "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
                ["export_success"] = "–°–¥–µ–ª–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV.",
                ["win_streak"] = "üî• {0} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ–¥—Ä—è–¥!",
                ["loss_streak"] = "‚ö†Ô∏è {0} —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ–¥—Ä—è–¥!",
                ["back"] = "‚óÄ –ù–∞–∑–∞–¥",
                ["cancel"] = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                ["main_menu_button"] = "üè† –í –º–µ–Ω—é",
                ["next"] = "‚ñ∂ –î–∞–ª–µ–µ",
                ["skip"] = "‚û° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                ["confirm"] = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                ["edit"] = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                ["delete"] = "üóë –£–¥–∞–ª–∏—Ç—å",
                ["retry"] = "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
                ["other"] = "–î—Ä—É–≥–æ–µ",
                ["input_manually"] = "‚å® –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
                ["prefill_last"] = "‚Ü∫ –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π",
                ["period_week"] = "–∑–∞ –Ω–µ–¥–µ–ª—é",
                ["period_month"] = "–∑–∞ –º–µ—Å—è—Ü",
                ["period_all"] = "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è",
                ["input_ticker"] = "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT):",
                ["input_pnl"] = "–í–≤–µ–¥–∏—Ç–µ PnL (–Ω–∞–ø—Ä–∏–º–µ—Ä, +5.25 –∏–ª–∏ -3.1):",
                ["input_open"] = "–í–≤–µ–¥–∏—Ç–µ Open Price (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
                ["input_close"] = "–í–≤–µ–¥–∏—Ç–µ Close Price (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
                ["input_sl"] = "–í–≤–µ–¥–∏—Ç–µ Stop Loss (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
                ["input_tp"] = "–í–≤–µ–¥–∏—Ç–µ Take Profit (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
                ["input_volume"] = "–í–≤–µ–¥–∏—Ç–µ Volume (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
                ["input_comment"] = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
                ["history_title"] = "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫",
                ["history_filter"] = "–§–∏–ª—å—Ç—Ä—ã:",
                ["trade_detail"] = "–î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏:\nID: {0}\n–¢–∏–∫–µ—Ä: {1}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {2}\nPnL: {3}%\nOpen Price: {4}\nClose Price: {5}\nSL: {6}\nTP: {7}\nVolume: {8}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {9}\n–î–∞—Ç–∞: {10}",
                ["show_more"] = "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
            },
            ["en"] = new Dictionary<string, string>
            {
                ["welcome"] = "Welcome to TradingBot 2.0!\nI'll help you track your trades.\nClick 'Next' to start the tutorial.",
                ["onboarding_1"] = "üì• You can add trades via screenshots or manually.",
                ["onboarding_2"] = "üìä View statistics and equity curves.",
                ["onboarding_3"] = "‚öô Customize the bot (language, tickers, notifications).",
                ["main_menu"] = "Choose an action:",
                ["please_use_buttons"] = "Please use the buttons to control the bot.",
                ["error_occurred"] = "An error occurred. Try again or return to the menu.",
                ["trade_cancelled"] = "Trade input cancelled.",
                ["trade_saved"] = "Trade {0} (PnL={1}%) saved.",
                ["trade_saved_local"] = "Trade saved locally but not sent to Notion.",
                ["error_saving_trade"] = "Error saving trade.",
                ["trade_expired"] = "Trade expired or not found. Try again.",
                ["trade_deleted"] = "Trade deleted.",
                ["all_pending_cleared"] = "All pending trades cleared.",
                ["no_trades"] = "No trade data for the selected period.",
                ["invalid_input"] = "Invalid input. Try again.",
                ["invalid_pnl"] = "Enter a valid number for PnL (e.g., +5.25).",
                ["step_1"] = "üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 1/9: Select ticker",
                ["step_2"] = "üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 2/9: Select direction",
                ["step_3"] = "üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 3/9: Enter PnL",
                ["step_4"] = "üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú Step 4/9: Enter Open Price",
                ["step_5"] = "üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú Step 5/9: Enter Close Price",
                ["step_6"] = "üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú Step 6/9: Enter Stop Loss",
                ["step_7"] = "üü©üü©üü©üü©üü©üü©üü©‚¨ú Step 7/9: Enter Take Profit",
                ["step_8"] = "üü©üü©üü©üü©üü©üü©üü©üü© Step 8/9: Enter Volume",
                ["step_9"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü© Step 9/9: Enter comment",
                ["trade_preview"] = "Current trade:\nTicker: {0}\nDirection: {1}\nPnL: {2}%\nOpen Price: {3}\nClose Price: {4}\nSL: {5}\nTP: {6}\nVolume: {7}\nComment: {8}",
                ["confirm_trade"] = "Everything correct?",
                ["edit_field"] = "Select field to edit:",
                ["pending_trades"] = "Pending trades:\n{0}",
                ["no_pending_trades"] = "No pending trades.",
                ["stats_menu"] = "Select period for statistics:",
                ["stats_result"] = "Statistics {0}:\nTotal trades: {1}\nTotal PnL: {2}%\nProfitable: {3}\nLoss-making: {4}\nWin Rate: {5}%",
                ["advanced_stats"] = "Trades: {0}\nTotal PnL: {1}%\nAverage PnL: {2}%\nBest: {3}%\nWorst: {4}%\nWin Rate: {5}%",
                ["date_label"] = "Date",
                ["pnl_label"] = "Cumulative PnL",
                ["equity_curve"] = "Equity Curve",
                ["error_graph"] = "Error generating graph.",
                ["settings_menu"] = "Settings:",
                ["settings_updated"] = "Settings updated.",
                ["settings_reset"] = "Settings reset.",
                ["help_menu"] = "Help:\nSelect a section",
                ["support"] = "Contact support",
                ["whats_new"] = "What's new?",
                ["export_success"] = "Trades exported to CSV.",
                ["win_streak"] = "üî• {0} winning trades in a row!",
                ["loss_streak"] = "‚ö†Ô∏è {0} losing trades in a row!",
                ["back"] = "‚óÄ Back",
                ["cancel"] = "‚ùå Cancel",
                ["main_menu_button"] = "üè† Menu",
                ["next"] = "‚ñ∂ Next",
                ["skip"] = "‚û° Skip",
                ["confirm"] = "‚úÖ Confirm",
                ["edit"] = "‚úèÔ∏è Edit",
                ["delete"] = "üóë Delete",
                ["retry"] = "üîÑ Retry",
                ["other"] = "Other",
                ["input_manually"] = "‚å® Enter manually",
                ["prefill_last"] = "‚Ü∫ Prefill from last",
                ["period_week"] = "for the week",
                ["period_month"] = "for the month",
                ["period_all"] = "for all time",
                ["input_ticker"] = "Enter ticker (e.g., BTCUSDT):",
                ["input_pnl"] = "Enter PnL (e.g., +5.25 or -3.1):",
                ["input_open"] = "Enter Open Price (or skip):",
                ["input_close"] = "Enter Close Price (or skip):",
                ["input_sl"] = "Enter Stop Loss (or skip):",
                ["input_tp"] = "Enter Take Profit (or skip):",
                ["input_volume"] = "Enter Volume (or skip):",
                ["input_comment"] = "Enter comment (or skip):",
                ["history_title"] = "Trade History",
                ["history_filter"] = "Filters:",
                ["trade_detail"] = "Trade Details:\nID: {0}\nTicker: {1}\nDirection: {2}\nPnL: {3}%\nOpen Price: {4}\nClose Price: {5}\nSL: {6}\nTP: {7}\nVolume: {8}\nComment: {9}\nDate: {10}",
                ["show_more"] = "Show more"
            }
        };

        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –∏ PnL –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
        private readonly List<string> _popularTickers = new() { "BTCUSDT", "ETHUSDT", "SOLUSDT", "BNBUSDT", "XRPUSDT" };
        private readonly List<string> _popularPnL = new() { "+0.5", "-0.5", "+1", "-1" };

        public IReadOnlyList<string> PopularTickers => _popularTickers;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ –∫–ª—é—á—É (—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        public string GetText(string key, string language, params object[] args)
        {
            if (_resources.TryGetValue(language, out var dict) && dict.TryGetValue(key, out string value))
            {
                return (args != null && args.Length > 0) ? string.Format(value, args) : value;
            }
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á
            return key;
        }

        // –≠–∫—Ä–∞–Ω –æ–±—É—á–µ–Ω–∏—è (3 —à–∞–≥–∞ onboarding)
        public (string Text, InlineKeyboardMarkup Keyboard) GetOnboardingScreen(int step, string language)
        {
            string text = step switch
            {
                1 => GetText("welcome", language) + "\n\n" + GetText("onboarding_1", language),
                2 => GetText("onboarding_2", language),
                3 => GetText("onboarding_3", language),
                _ => ""
            };
            // –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞
            InlineKeyboardMarkup keyboard;
            if (step < 3)
            {
                keyboard = new InlineKeyboardMarkup(new[]
                {
                    InlineKeyboardButton.WithCallbackData(GetText("next", language), "onboarding")
                });
            }
            else
            {
                keyboard = new InlineKeyboardMarkup(new[]
                {
                    InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", language), "main")
                });
            }
            return (text, keyboard);
        }

        // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        public InlineKeyboardMarkup GetMainMenu(UserSettings settings)
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚ûï –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞", "start_trade"),
                    InlineKeyboardButton.WithCallbackData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üìú –ò—Å—Ç–æ—Ä–∏—è", "history_page_1_period_all_filter_none"),
                    InlineKeyboardButton.WithCallbackData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚ùì –ü–æ–º–æ—â—å", "help"),
                    InlineKeyboardButton.WithCallbackData("‚ÑπÔ∏è –û –±–æ—Ç–µ", "whatsnew")
                }
            });
        }

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –≤ –º–µ–Ω—é)
        public InlineKeyboardMarkup GetErrorKeyboard(UserSettings settings)
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("retry", settings.Language), "retry") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") }
            });
        }

        // –≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Å–¥–µ–ª–∫–∏ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥)
        public (string Text, InlineKeyboardMarkup Keyboard) GetTradeInputScreen(Trade trade, int step, UserSettings settings, string tradeId, Trade lastTrade = null)
        {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
            string preview = GetText("trade_preview", settings.Language,
                string.IsNullOrEmpty(trade.Ticker) ? "-" : trade.Ticker,
                string.IsNullOrEmpty(trade.Direction) ? "-" : trade.Direction,
                trade.PnL,
                trade.OpenPrice?.ToString() ?? "-",
                trade.Entry?.ToString() ?? "-",
                trade.SL?.ToString() ?? "-",
                trade.TP?.ToString() ?? "-",
                trade.Volume?.ToString() ?? "-",
                string.IsNullOrEmpty(trade.Comment) ? "-" : trade.Comment);
            // –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
            string prompt = GetText($"step_{step}", settings.Language);
            var buttons = new List<InlineKeyboardButton[]>();
            if (step == 1)
            {
                // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
                var initialTickers = settings.FavoriteTickers.Concat(settings.RecentTickers).Concat(_popularTickers)
                                        .Distinct().Take(5).ToList();
                buttons.AddRange(initialTickers.Select(ticker => new[] {
                    InlineKeyboardButton.WithCallbackData(ticker, $"set_ticker_{ticker}_trade_{tradeId}")
                }));
                if (settings.FavoriteTickers.Count + settings.RecentTickers.Count + _popularTickers.Count > 5)
                {
                    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
                    buttons.Add(new[] {
                        InlineKeyboardButton.WithCallbackData(GetText("show_more", settings.Language), $"more_tickers_trade_{tradeId}")
                    });
                }
                // –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–∏–∫–µ—Ä–∞
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("other", settings.Language), $"input_ticker_trade_{tradeId}")
                });
                // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π"
                if (lastTrade != null && !string.IsNullOrEmpty(lastTrade.Ticker))
                {
                    buttons.Add(new[] {
                        InlineKeyboardButton.WithCallbackData(GetText("prefill_last", settings.Language), $"set_ticker_{lastTrade.Ticker}_trade_{tradeId}")
                    });
                }
            }
            else if (step == 2)
            {
                // –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
                buttons.AddRange(new[]
                {
                    new[] { InlineKeyboardButton.WithCallbackData("Long", $"set_direction_Long_trade_{tradeId}") },
                    new[] { InlineKeyboardButton.WithCallbackData("Short", $"set_direction_Short_trade_{tradeId}") }
                });
                // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                foreach (var direction in settings.RecentDirections.Take(2))
                {
                    buttons.Add(new[] {
                        InlineKeyboardButton.WithCallbackData(direction, $"set_direction_{direction}_trade_{tradeId}")
                    });
                }
            }
            else if (step == 3)                   // –≤–≤–æ–¥ PnL
            {
                buttons.Clear();

                // –±—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ¬±0.5/¬±1
                buttons.AddRange(new[]
                {
                    new[] { InlineKeyboardButton.WithCallbackData("-0.5%", $"adjust_pnl_-0.5_trade_{tradeId}") },
                    new[] { InlineKeyboardButton.WithCallbackData("+0.5%", $"adjust_pnl_0.5_trade_{tradeId}") },
                    new[] { InlineKeyboardButton.WithCallbackData("-1%",   $"adjust_pnl_-1_trade_{tradeId}") },
                    new[] { InlineKeyboardButton.WithCallbackData("+1%",   $"adjust_pnl_1_trade_{tradeId}") }
                });

                // ¬´–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é¬ª
                buttons.Add(new[] {
                    InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language),
                        $"input_pnl_trade_{tradeId}")
                });

                // ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª
                buttons.Add(new[] {
                    InlineKeyboardButton.WithCallbackData(GetText("skip", settings.Language),
                        $"skip_trade_{tradeId}_step_{step}")
                });

                // ¬´‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ¬ª (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
                buttons.Add(new[] {
                    InlineKeyboardButton.WithCallbackData("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", $"allcorrect_{tradeId}")
                });
            }


            else if (step >= 4 && step <= 8)
            {
                string field = step switch
                {
                    4 => "open",
                    5 => "close",
                    6 => "sl",
                    7 => "tp",
                    8 => "volume",
                    _ => ""
                };
                buttons.Add(new[] {
                    InlineKeyboardButton.WithCallbackData(GetText("skip", settings.Language), $"skip_trade_{tradeId}_step_{step}")
                });
                buttons.Add(new[] {
                    InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_{field}") // –£–±—Ä–∞–Ω–æ _trade_{tradeId}
                });
            }
            else if (step == 9)
            {
                // –®–∞–≥ 9: –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                foreach (var comment in settings.RecentComments.Take(3))
                {
                    string label = comment.Length > 20 ? comment.Substring(0, 17) + "..." : comment;
                    buttons.Add(new[] {
                        InlineKeyboardButton.WithCallbackData(label, $"input_comment_trade_{tradeId}")
                    });
                }
                buttons.Add(new[] {
                    InlineKeyboardButton.WithCallbackData(GetText("skip", settings.Language), $"skip_trade_{tradeId}_step_{step}")
                });
                buttons.Add(new[] {
                    InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_comment_trade_{tradeId}")
                });
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
            buttons.Add(new[] {
                InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), $"back_trade_{tradeId}_step_{step}")
            });
            buttons.Add(new[] {
                InlineKeyboardButton.WithCallbackData(GetText("cancel", settings.Language), "cancel")
            });
            return ($"{preview}\n\n{prompt}", new InlineKeyboardMarkup(buttons));
        }

        // –≠–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä + –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è)
        public (string Text, InlineKeyboardMarkup Keyboard) GetTradeConfirmationScreen(Trade trade, string tradeId, UserSettings settings)
        {
            string text = GetText("trade_preview", settings.Language,
                trade.Ticker ?? "-", trade.Direction ?? "-", trade.PnL,
                trade.OpenPrice?.ToString() ?? "-", trade.Entry?.ToString() ?? "-",
                trade.SL?.ToString() ?? "-", trade.TP?.ToString() ?? "-",
                trade.Volume?.ToString() ?? "-", trade.Comment ?? "-");
            text += "\n\n" + GetText("confirm_trade", settings.Language);
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("confirm", settings.Language), $"confirm_trade_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("edit", settings.Language), $"edit_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("delete", settings.Language), $"delete_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") }
            });
            return (text, keyboard);
        }

        // –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        public (string Text, InlineKeyboardMarkup Keyboard) GetEditFieldMenu(Trade trade, string tradeId, UserSettings settings)
        {
            string text = GetText("edit_field", settings.Language);
            var buttons = new List<InlineKeyboardButton[]>
            {
                new[] { InlineKeyboardButton.WithCallbackData("–¢–∏–∫–µ—Ä", $"editfield_ticker_trade_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", $"editfield_direction_trade_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData("PnL", $"editfield_pnl_trade_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData("Open Price", $"editfield_open_trade_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData("Close Price", $"editfield_close_trade_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData("Stop Loss", $"editfield_sl_trade_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData("Take Profit", $"editfield_tp_trade_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData("Volume", $"editfield_volume_trade_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", $"editfield_comment_trade_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") }
            };
            return (text, new InlineKeyboardMarkup(buttons));
        }

        // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—è —Å–¥–µ–ª–∫–∏ (—Ç–µ–∫—Å—Ç + —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞)
        public (string Text, InlineKeyboardMarkup Keyboard) GetInputPrompt(string field, UserSettings settings, string tradeId)
        {
            string text = field switch
            {
                "ticker" => GetText("input_ticker", settings.Language),
                "pnl" => GetText("input_pnl", settings.Language),
                "open" => GetText("input_open", settings.Language),
                "close" => GetText("input_close", settings.Language),
                "sl" => GetText("input_sl", settings.Language),
                "tp" => GetText("input_tp", settings.Language),
                "volume" => GetText("input_volume", settings.Language),
                "comment" => GetText("input_comment", settings.Language),
                _ => GetText("invalid_input", settings.Language)
            };
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("cancel", settings.Language), "cancel") }
            });
            return (text, keyboard);
        }

        // –≠–∫—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (PendingTrades) —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        public (string Text, InlineKeyboardMarkup Keyboard) GetPendingTradesScreen(List<(string TradeId, Trade Trade, int MessageId, DateTime CreatedAt)> pendingTrades, int page, int total, UserSettings settings)
        {
            string text;
            if (pendingTrades.Count == 0)
            {
                text = GetText("no_pending_trades", settings.Language);
            }
            else
            {
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                var lines = pendingTrades.Select(t =>
                    $"–¢–∏–∫–µ—Ä: {t.Trade.Ticker}, PnL: {t.Trade.PnL}% ({t.CreatedAt:yyyy-MM-dd HH:mm})");
                text = GetText("pending_trades", settings.Language, string.Join("\n", lines));
            }
            int pageSize = 5;
            int totalPages = (int)Math.Ceiling(total / (double)pageSize);
            var buttons = new List<InlineKeyboardButton[]>();
            if (pendingTrades.Count > 0)
            {
                // –ö–∞–∂–¥–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ ‚Äì –∫–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                foreach (var (tradeId, trade, msgId, createdAt) in pendingTrades)
                {
                    string label = $"{trade.Ticker} ({trade.PnL}%)";
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(label, $"edit_{tradeId}") });
                }
                // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("all_pending_cleared", settings.Language), "clearpending") });
            }
            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è (—Å—Ç—Ä–µ–ª–∫–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü)
            var paginationButtons = new List<InlineKeyboardButton>();
            if (page > 1)
                paginationButtons.Add(InlineKeyboardButton.WithCallbackData("‚óÄ", $"pending_page_{page - 1}"));
            for (int i = Math.Max(1, page - 2); i <= Math.Min(totalPages, page + 2); i++)
            {
                paginationButtons.Add(InlineKeyboardButton.WithCallbackData(i == page ? $"[{i}]" : i.ToString(), $"pending_page_{i}"));
            }
            if (page < totalPages)
                paginationButtons.Add(InlineKeyboardButton.WithCallbackData("‚ñ∂", $"pending_page_{page + 1}"));
            if (paginationButtons.Any())
                buttons.Add(paginationButtons.ToArray());
            // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") });
            return (text, new InlineKeyboardMarkup(buttons));
        }

        // –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        public (string Text, InlineKeyboardMarkup Keyboard) GetStatsMenu(UserSettings settings)
        {
            string text = GetText("stats_menu", settings.Language);
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_week", settings.Language), "statsperiod_week") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_month", settings.Language), "statsperiod_month") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_all", settings.Language), "statsperiod_all") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") }
            });
            return (text, keyboard);
        }

        // –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        public (string Text, InlineKeyboardMarkup Keyboard) GetStatsResult(List<Trade> trades, string period, UserSettings settings)
        {
            int totalTrades = trades.Count;
            decimal totalPnL = trades.Sum(t => t.PnL);
            int profitable = trades.Count(t => t.PnL > 0);
            int losing = trades.Count(t => t.PnL < 0);
            int winRate = totalTrades > 0 ? (int)((double)profitable / totalTrades * 100) : 0;
            string periodText = GetText($"period_{period}", settings.Language);
            string text = GetText("stats_result", settings.Language, periodText, totalTrades, totalPnL.ToString("F2"), profitable, losing, winRate);
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") }
            });
            return (text, keyboard);
        }

        // –ú–µ–Ω—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≥—Ä–∞—Ñ–∏–∫ —ç–∫–≤–∏—Ç–∏)
        public (string Text, InlineKeyboardMarkup Keyboard) GetAdvancedStatsMenu(UserSettings settings)
        {
            string text = GetText("equity_curve", settings.Language);
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_week", settings.Language), "advstatsperiod_week") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_month", settings.Language), "advstatsperiod_month") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_all", settings.Language), "advstatsperiod_all") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") }
            });
            return (text, keyboard);
        }

        // –≠–∫—Ä–∞–Ω –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ (—Å–ø–∏—Å–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
        public (string Text, InlineKeyboardMarkup Keyboard) GetHistoryScreen(List<Trade> trades, int page, string period, string filter, UserSettings settings)
        {
            string text = GetText("history_title", settings.Language);
            if (trades.Count == 0)
            {
                text += "\n" + GetText("no_trades", settings.Language);
            }
            else
            {
                int pageSize = 5;
                var pageTrades = trades.Skip((page - 1) * pageSize).Take(pageSize).ToList();
                var lines = pageTrades.Select(t => $"–¢–∏–∫–µ—Ä: {t.Ticker}, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {t.Direction}, PnL: {t.PnL}% ({t.Date:yyyy-MM-dd})");
                text += "\n" + string.Join("\n", lines);
            }
            var buttons = new List<InlineKeyboardButton[]>();
            if (trades.Count > 0)
            {
                // –§–∏–ª—å—Ç—Ä—ã: –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ PnL >1%, < -1%
                var uniqueTickers = trades.Select(t => t.Ticker).Distinct().Take(3);
                var uniqueDirections = trades.Select(t => t.Direction).Distinct().Take(2);
                foreach (var ticker in uniqueTickers)
                {
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData($"–¢–æ–ª—å–∫–æ {ticker}", $"historyfilter_ticker_{ticker}") });
                }
                foreach (var direction in uniqueDirections)
                {
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(direction, $"historyfilter_direction_{direction}") });
                }
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(">1%", $"historyfilter_pnl_gt_1") });
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData("<-1%", $"historyfilter_pnl_lt_-1") });
                // –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ (–º–∞–∫—Å–∏–º—É–º 5) –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                foreach (var t in trades.Take(5))
                {
                    string label = $"{t.Ticker} ({t.PnL}%)";
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(label, $"historydetail_{t.Id}") });
                }
            }
            // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("export_success", settings.Language), "export") });
            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            int totalPages = (int)Math.Ceiling(trades.Count / 5.0);
            var paginationButtons = new List<InlineKeyboardButton>();
            if (page > 1)
                paginationButtons.Add(InlineKeyboardButton.WithCallbackData("‚óÄ", $"history_page_{page - 1}_period_{period}_filter_{filter ?? "none"}"));
            for (int i = Math.Max(1, page - 2); i <= Math.Min(totalPages, page + 2); i++)
            {
                paginationButtons.Add(InlineKeyboardButton.WithCallbackData(i == page ? $"[{i}]" : i.ToString(), $"history_page_{i}_period_{period}_filter_{filter ?? "none"}"));
            }
            if (page < totalPages)
                paginationButtons.Add(InlineKeyboardButton.WithCallbackData("‚ñ∂", $"history_page_{page + 1}_period_{period}_filter_{filter ?? "none"}"));
            if (paginationButtons.Any())
                buttons.Add(paginationButtons.ToArray());
            // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") });
            return (text, new InlineKeyboardMarkup(buttons));
        }

        // –≠–∫—Ä–∞–Ω –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π —Å–¥–µ–ª–∫–∏ (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏)
        public (string Text, InlineKeyboardMarkup Keyboard) GetTradeDetailScreen(Trade trade, UserSettings settings)
        {
            string text = GetText("trade_detail", settings.Language,
                trade.Id, trade.Ticker ?? "-", trade.Direction ?? "-", trade.PnL,
                trade.OpenPrice?.ToString() ?? "-", trade.Entry?.ToString() ?? "-",
                trade.SL?.ToString() ?? "-", trade.TP?.ToString() ?? "-",
                trade.Volume?.ToString() ?? "-", trade.Comment ?? "-", trade.Date);
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") }
            });
            return (text, keyboard);
        }

        // –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        public (string Text, InlineKeyboardMarkup Keyboard) GetSettingsMenu(UserSettings settings)
        {
            string text = GetText("settings_menu", settings.Language);
            var buttons = new List<InlineKeyboardButton[]>
            {
                new[] { InlineKeyboardButton.WithCallbackData($"–Ø–∑—ã–∫: {(settings.Language == "ru" ? "–†—É—Å—Å–∫–∏–π" : "English")}", "settings_language") },
                new[] { InlineKeyboardButton.WithCallbackData($"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {(settings.NotificationsEnabled ? "–í–∫–ª" : "–í—ã–∫–ª")}", "settings_notifications") },
                new[] { InlineKeyboardButton.WithCallbackData("–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã", "settings_tickers") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("settings_reset", settings.Language), "resetsettings") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") }
            };
            return (text, new InlineKeyboardMarkup(buttons));
        }

        // –ü—Ä–æ–º–ø—Ç –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞)
        public (string Text, InlineKeyboardMarkup Keyboard) GetSettingsInputPrompt(string field, UserSettings settings)
        {
            string text = field switch
            {
                "ticker" => "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:",
                _ => GetText("invalid_input", settings.Language)
            };
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("cancel", settings.Language), "cancel") }
            });
            return (text, keyboard);
        }

        // –ú–µ–Ω—é –ø–æ–º–æ—â–∏
        public (string Text, InlineKeyboardMarkup Keyboard) GetHelpMenu(UserSettings settings)
        {
            string text = GetText("help_menu", settings.Language);
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("support", settings.Language), "support") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("whats_new", settings.Language), "whatsnew") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") }
            });
            return (text, keyboard);
        }
    }
}