using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Text;
using Telegram.Bot.Types.ReplyMarkups;
using TradingBot.Models;

namespace TradingBot.Services
{
    // –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    public class UIManager
    {
        // –û—á–∏—Å—Ç–∫–∞ callback_data –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram API
        public static string SanitizeCallbackData(string input)
        {
            if (string.IsNullOrEmpty(input)) return input;
            
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –¥–≤–æ–µ—Ç–æ—á–∏—è, –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            var result = input
                .Replace(" ", "_")
                .Replace("%", "PCT")
                .Replace(":", "_")
                .Replace("/", "_")
                .Replace("(", "")
                .Replace(")", "")
                .Replace("&", "AND")
                .Replace("#", "NUM")
                .Replace("@", "AT")
                .Replace("$", "USD")
                .Replace("‚Ç¨", "EUR")
                .Replace("¬£", "GBP")
                .Replace("+", "PLUS")
                .Replace("-", "MINUS")
                .Replace("=", "EQ")
                .Replace("?", "Q")
                .Replace("!", "")
                .Replace(",", "_")
                .Replace(".", "_");

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã (—ç–º–æ–¥–∑–∏, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ –ø—Ä.) —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å <=64 –±–∞–π—Ç
            result = Regex.Replace(result, @"[^\x00-\x7F]", string.Empty);

            // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤ —á—Ç–æ–±—ã –≤–µ—Å—å callback_data –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª 64 –±–∞–π—Ç–∞
            if (result.Length > 20)
                result = result.Substring(0, 20);

            return result;
        }

        private readonly Dictionary<string, Dictionary<string, string>> _resources = new()
        {
            ["ru"] = new Dictionary<string, string>
            {
                ["welcome"] = "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TradingBot Pro!\n\nüìä –í–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n\nüí° –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ üì∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n‚Ä¢ ‚å®Ô∏è –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Å–¥–µ–ª–æ–∫\n‚Ä¢ üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã\n‚Ä¢ üåê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n‚Ä¢ üíæ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ\n‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏\n\nüéØ –ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!",
                ["onboarding_1"] = "üì• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫\n\n–£ –≤–∞—Å –µ—Å—Ç—å –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞:\n\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —ç–∫—Ä–∞–Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ - —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É –¥–∞–Ω–Ω—ã–µ\n\n‚å®Ô∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥: –ü–æ—à–∞–≥–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Å–¥–µ–ª–∫–∏\n\n–ö–∞–∂–¥—ã–π —Å–ø–æ—Å–æ–± –æ–¥–∏–Ω–∞–∫–æ–≤–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω!",
                ["onboarding_2"] = "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n\nüìà –î–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º\nüìä –ì—Ä–∞—Ñ–∏–∫–∏ —ç–∫–≤–∏—Ç–∏ –∏ P&L\nüéØ –ê–Ω–∞–ª–∏–∑ win rate –∏ —Å–µ—Ä–∏–π\nüìÖ –û—Ç—á—ë—Ç—ã –ø–æ –¥–Ω—è–º/–Ω–µ–¥–µ–ª—è–º/–º–µ—Å—è—Ü–∞–º\n\n–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!",
                ["onboarding_3"] = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:\n\nüåê –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (RU/EN)\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\nüìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã\nüíæ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏\n\nüåê –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion:\n‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏\n‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å–¥–µ–ª–∫–∏\n\nüîß –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ Notion\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏\n\n–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'!",
                ["main_menu"] = "üéØ TradingBot - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\nüìÖ –°–¥–µ–ª–æ–∫: {0} | üìà PnL: {1} | ‚úÖ Win Rate: {2}\n\nüöÄ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n\n‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É\nüìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\nüìú –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\nüÜò –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                ["please_use_buttons"] = "üëá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                ["error_occurred"] = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                ["trade_cancelled"] = "‚ùå –í–≤–æ–¥ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω.",
                ["trade_saved"] = "‚úÖ –°–¥–µ–ª–∫–∞ {0} (PnL={1}%) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                ["trade_saved_local"] = "üíæ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ.",
                ["trade_sent_notion"] = "üåê –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Notion.",
                ["trade_not_saved"] = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É.",
                ["notion_save_error"] = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion API.",
                ["local_save_error"] = "–ü—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.",
                ["error_saving_trade"] = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.",
                ["trade_expired"] = "‚è∞ –°–¥–µ–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                ["trade_deleted"] = "üóëÔ∏è –°–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.",
                ["all_pending_cleared"] = "üßπ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –æ—á–∏—â–µ–Ω—ã.",
                ["no_trades"] = "üìâ –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
                ["invalid_input"] = "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                ["invalid_pnl"] = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è PnL (–Ω–∞–ø—Ä–∏–º–µ—Ä, +5.25).",
                ["error_getting_image"] = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                ["error_processing_image"] = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                ["rate_limit"] = "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.",
                ["support_contact"] = "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_username",
                ["win_streak"] = "üî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {0} —Å–¥–µ–ª–æ–∫ –ø–æ–¥—Ä—è–¥!",
                ["loss_streak"] = "üíî –°–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤: {0} —Å–¥–µ–ª–æ–∫ –ø–æ–¥—Ä—è–¥. –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!",
                ["ticker_added"] = "‚úÖ –¢–∏–∫–µ—Ä {0} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ.",
                ["ticker_removed"] = "üóëÔ∏è –¢–∏–∫–µ—Ä {0} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!",
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Notion
                ["notion_settings"] = "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Notion",
                ["notion_enabled"] = "‚úÖ Notion –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω",
                ["notion_disabled"] = "‚ùå Notion –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
                ["notion_connect"] = "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Notion",
                ["notion_disconnect"] = "üîå –û—Ç–∫–ª—é—á–∏—Ç—å Notion",
                ["notion_token"] = "üîë –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                ["notion_database"] = "üóÑÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Database ID",
                ["notion_test"] = "üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                ["notion_token_input"] = "üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Notion\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Notion API",
                ["notion_database_input"] = "üóÑÔ∏è –í–≤–µ–¥–∏—Ç–µ Database ID\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∏–ª–∏ ID –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion",
            ["notion_database_input"] = "üóÑÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ URL –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion:\n\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Notion\n2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ 'Share' –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n3Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –µ—ë\n4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL (—á–∞—Å—Ç—å –ø–æ—Å–ª–µ notion.so/ –∏ –ø–µ—Ä–µ–¥ ?v=)\n5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
                ["notion_connection_success"] = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Notion —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
                ["notion_connection_failed"] = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Notion\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ü—Ä–∞–≤–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                ["notion_settings_saved"] = "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Notion —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                ["notion_disconnected"] = "üîå Notion –æ—Ç–∫–ª—é—á–µ–Ω",
                
                // –ù–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
                ["error_what_happened"] = "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ",
                ["error_what_to_do"] = "–ß—Ç–æ –¥–µ–ª–∞—Ç—å",
                ["error_next_step"] = "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥",
                ["error_unknown"] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",

                // –¢–µ–∫—Å—Ç—ã —à–∞–≥–æ–≤
                ["step_1"] = "üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 1/14: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä",
                ["step_2"] = "üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 2/14: –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç",
                ["step_3"] = "üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 3/14: –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é",
                ["step_4"] = "üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 4/14: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é (LONG/SHORT)",
                ["step_5"] = "üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 5/14: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (LONG/SHORT)",
                ["step_6"] = "üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 6/14: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–¥–µ–ª–∫–∏",
                ["step_7"] = "üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 7/14: –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç–∞–ø/—Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
                ["step_8"] = "üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 8/14: –£–∫–∞–∂–∏—Ç–µ —Ä–∏—Å–∫ (%)",
                ["step_9"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 9/14: –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ R:R",
                ["step_10"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú –®–∞–≥ 10/14: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏",
                ["step_11"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú –®–∞–≥ 11/14: –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–±—ã–ª—å (%)",
                ["step_12"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú –®–∞–≥ 12/14: –í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏–∏",
                ["step_13"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú –®–∞–≥ 13/14: –í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—Ö–æ–¥–∞",
                ["step_14"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü© –®–∞–≥ 14/14: –í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É",

                ["trade_preview"] =
                    "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n" +
                    "üìå –¢–∏–∫–µ—Ä: {0}\nüìå –ê–∫–∫–∞—É–Ω—Ç: {1}\nüìå –°–µ—Å—Å–∏—è: {2}\nüìå –ü–æ–∑–∏—Ü–∏—è: {3}\nüìå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {4}\n" +
                    "üìå –ö–æ–Ω—Ç–µ–∫—Å—Ç: {5}\nüìå –°–µ—Ç–∞–ø: {6}\nüìå –†–µ–∑—É–ª—å—Ç–∞—Ç: {7}\nüìå R:R = {8}\nüìå –†–∏—Å–∫: {9}%\nüìå –ü—Ä–∏–±—ã–ª—å: {10}%\n" +
                    "üòÉ –≠–º–æ—Ü–∏–∏: {11}\nüîç –î–µ—Ç–∞–ª–∏ –≤—Ö–æ–¥–∞: {12}\nüìù –ó–∞–º–µ—Ç–∫–∞: {13}",

                ["confirm_trade"] = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É?",
                ["edit_field"] = "‚úèÔ∏è –ö–∞–∫–æ–µ –ø–æ–ª–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?",

                ["pending_trades"] = "‚è≥ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n{0}",
                ["no_pending_trades"] = "‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.",
                ["stats_menu"] = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
                ["stats_result"] = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {0}:\n\nüìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {1}\nüí∞ –û–±—â–∏–π PnL: {2}%\n‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {3}\n‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {4}\nüéØ –í–∏–Ω—Ä–µ–π—Ç: {5}%",

                ["advanced_stats"] = "üìà –°–¥–µ–ª–æ–∫: {0}\n–û–±—â–∏–π PnL: {1}%\n–°—Ä–µ–¥–Ω–∏–π PnL: {2}%\n–õ—É—á—à–∏–π: {3}%\n–•—É–¥—à–∏–π: {4}%\nWin Rate: {5}%",
                ["date_label"] = "üìÖ –î–∞—Ç–∞",
                ["pnl_label"] = "üìà –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π PnL",
                ["equity_curve"] = "üìà –ö—Ä–∏–≤–∞—è —ç–∫–≤–∏—Ç–∏:",
                ["error_graph"] = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.",
                ["export_success"] = "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!",

                ["settings_menu"] = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
                ["settings_updated"] = "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                ["settings_reset"] = "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.",
                ["main_menu_button"] = "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                ["other"] = "–î—Ä—É–≥–æ–µ...",
                ["prefill_last"] = "–ö–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π",
                ["cancel"] = "üö´ –û—Ç–º–µ–Ω–∞",
                ["skip"] = "‚û° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                ["input_manually"] = "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
                ["confirm"] = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                ["edit"] = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                ["delete"] = "üóë –£–¥–∞–ª–∏—Ç—å",
                ["retry"] = "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
                ["period_week"] = "–ù–µ–¥–µ–ª—è",
                ["period_month"] = "–ú–µ—Å—è—Ü",
                ["period_all"] = "–í—Å—ë –≤—Ä–µ–º—è",
                ["support"] = "üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                ["help_menu"] = "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:",
                ["whats_new"] = "üì£ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ",
                
                // –ù–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Notion
                ["notion_settings"] = "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Notion:",
                ["notion_enabled"] = "‚úÖ Notion –ø–æ–¥–∫–ª—é—á–µ–Ω",
                ["notion_disabled"] = "‚ùå Notion –æ—Ç–∫–ª—é—á–µ–Ω",
                ["notion_connect"] = "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Notion",
                ["notion_disconnect"] = "üîå –û—Ç–∫–ª—é—á–∏—Ç—å Notion",
                ["notion_token"] = "üîë –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω",
                ["notion_database"] = "üóÑÔ∏è –í–≤–µ—Å—Ç–∏ Database ID",
                ["notion_test"] = "üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                ["notion_status"] = "üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                ["notion_token_input"] = "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Integration Token –æ—Ç Notion:\n\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://www.notion.so/my-integrations\n2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '+ New integration'\n3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ\n4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω\n5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
                ["notion_database_input"] = "üóÑÔ∏è –í–≤–µ–¥–∏—Ç–µ Database ID –∏–ª–∏ URL –≤–∞—à–µ–π –±–∞–∑—ã Notion:\n\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Notion\n2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ 'Share' –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n3Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –µ—ë\n4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL (—á–∞—Å—Ç—å –ø–æ—Å–ª–µ notion.so/ –∏ –¥–æ ?v=)\n5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
                ["notion_connection_success"] = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Notion —É—Å–ø–µ—à–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–¥–µ–ª–∫–∏ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤–∞—à–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.",
                ["notion_connection_failed"] = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Notion.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Database ID\n‚Ä¢ –î–æ—Å—Ç—É–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –í–µ—Ä—Å–∏—é API (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 2022-06-28)",
                ["notion_token_invalid"] = "‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
                ["notion_database_invalid"] = "‚ö†Ô∏è Database ID –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
                ["notion_already_connected"] = "‚ÑπÔ∏è Notion —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û—Ç–∫–ª—é—á–∏—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                ["notion_not_connected"] = "‚ÑπÔ∏è Notion –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.",
                ["notion_disconnected"] = "‚úÖ Notion —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω. –í–∞—à–∏ —Å–¥–µ–ª–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                ["notion_help"] = "üìö –ü–æ–º–æ—â—å –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é Notion:\n\nüîë Integration Token:\n‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–∞ https://www.notion.so/my-integrations\n‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω\n\nüóÑÔ∏è Database ID:\n‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Notion\n‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL\n‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Notion",
            ["notion_settings"] = "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Notion",
            ["notion_enabled"] = "‚úÖ Notion –ø–æ–¥–∫–ª—é—á–µ–Ω",
            ["notion_disabled"] = "‚ùå Notion –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            ["notion_connect"] = "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Notion",
            ["notion_disconnect"] = "üîå –û—Ç–∫–ª—é—á–∏—Ç—å Notion",
            ["notion_token"] = "üîë –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω",
            ["notion_database"] = "üóÑÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
            ["notion_test"] = "üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            ["notion_test"] = "üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            ["back_to_settings"] = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            ["notion_settings"] = "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Notion",
            ["notion_enabled"] = "‚úÖ Notion –ø–æ–¥–∫–ª—é—á–µ–Ω",
            ["notion_disabled"] = "‚ùå Notion –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",

                // –¢–µ–∫—Å—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞
                ["input_ticker"] = "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC/USDT):",
                ["input_account"] = "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:",
                ["input_session"] = "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é:",
                ["input_position"] = "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏:",
                ["input_direction"] = "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
                ["input_risk"] = "üìù –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ä–∏—Å–∫–∞ –≤ %:",
                ["input_rr"] = "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ R:R:",
                ["input_profit"] = "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–±—ã–ª—å –≤ %:",
                ["input_context"] = "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–¥–µ–ª–∫–∏:",
                ["input_setup"] = "üìù –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ç–∞–ø/—Å—Ç—Ä–∞—Ç–µ–≥–∏—é:",
                ["input_result"] = "üìù –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏:",
                ["input_emotions"] = "üìù –í–≤–µ–¥–∏—Ç–µ —ç–º–æ—Ü–∏–∏:",
                ["input_entry"] = "üìù –í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—Ö–æ–¥–∞:",
                ["input_note"] = "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:",

                // –¢–µ–∫—Å—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                ["notifications_enabled"] = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!",
                ["notifications_disabled"] = "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!",
                ["ticker_added"] = "‚úÖ –¢–∏–∫–µ—Ä {0} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                ["ticker_removed"] = "üóëÔ∏è –¢–∏–∫–µ—Ä {0} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!",
                ["back"] = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                ["add_ticker"] = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä",
                ["remove_ticker"] = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ä",
                ["support"] = "üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                ["whatsnew"] = "üì£ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ",
                ["back_to_settings"] = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
                ["no_trades"] = "üì≠ –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                ["history_filters"] = "üîç –§–∏–ª—å—Ç—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏:",
                ["history_page"] = "–°—Ç—Ä–∞–Ω–∏—Ü–∞ {0} –∏–∑ {1}",
                ["export"] = "üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                ["validation_error"] = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏:",
                
                // –ö–Ω–æ–ø–∫–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                ["main_menu_button"] = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                ["add_trade"] = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É",
                ["my_stats"] = "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                ["trade_history"] = "üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫",
                ["settings"] = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                ["help"] = "üÜò –ü–æ–º–æ—â—å",
                ["support"] = "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                ["next"] = "–î–∞–ª–µ–µ ‚ñ∂",
                ["start"] = "üöÄ –ù–∞—á–∞—Ç—å!",
                ["back"] = "‚óÄ –ù–∞–∑–∞–¥",
                ["skip_tutorial"] = "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
                ["other"] = "–î—Ä—É–≥–æ–µ",
                ["input_manually"] = "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
                ["prefill_last"] = "üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é",
                ["skip"] = "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                ["cancel"] = "‚ùå –û—Ç–º–µ–Ω–∞",
                ["save"] = "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                ["confirm"] = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                ["edit"] = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                ["delete"] = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                ["edit_ticker"] = "üìå –¢–∏–∫–µ—Ä",
                ["edit_account"] = "üßæ –ê–∫–∫–∞—É–Ω—Ç",
                ["edit_session"] = "üïí –°–µ—Å—Å–∏—è",
                ["edit_position"] = "üìê –ü–æ–∑–∏—Ü–∏—è",
                ["edit_direction"] = "‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                ["edit_context"] = "üß© –ö–æ–Ω—Ç–µ–∫—Å—Ç",
                ["edit_setup"] = "üß† –°–µ—Ç–∞–ø",
                ["edit_result"] = "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç",
                ["edit_rr"] = "‚öñÔ∏è R:R",
                ["edit_risk"] = "‚ö†Ô∏è –†–∏—Å–∫ %",
                ["edit_profit"] = "üìà –ü—Ä–∏–±—ã–ª—å %",
                ["edit_emotions"] = "üòÉ –≠–º–æ—Ü–∏–∏",
                ["edit_entry"] = "üîç –î–µ—Ç–∞–ª–∏ –≤—Ö–æ–¥–∞",
                ["edit_note"] = "üìù –ó–∞–º–µ—Ç–∫–∞",
                ["language"] = "üåê –Ø–∑—ã–∫",
                ["notifications"] = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                ["favorite_tickers"] = "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã",
                ["notion_integration"] = "üåê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion",
                ["reset_settings"] = "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                ["back_to_main"] = "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                ["stats_today"] = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
                ["stats_week"] = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é",
                ["stats_month"] = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü",
                ["stats_all_time"] = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                ["export_data"] = "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                ["clear_history"] = "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                ["about_bot"] = "‚ÑπÔ∏è –û –±–æ—Ç–µ",
                ["contact_support"] = "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
                ["version_info"] = "‚ÑπÔ∏è –í–µ—Ä—Å–∏—è",
                ["changelog"] = "üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                ["more"] = "‚Ä¶–ï—â—ë",
                ["filter_by_date"] = "üìÖ –ü–æ –¥–∞—Ç–µ",
                ["filter_by_ticker"] = "üìà –ü–æ —Ç–∏–∫–µ—Ä—É",
                ["filter_by_direction"] = "‚Üï –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
                ["filter_by_result"] = "‚úÖ/‚ùå –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É",
                
                // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–≤—å—é —Å–¥–µ–ª–æ–∫
                ["preview_ticker"] = "üìå –¢–∏–∫–µ—Ä",
                ["preview_account"] = "üßæ –ê–∫–∫–∞—É–Ω—Ç",
                ["preview_session"] = "üïí –°–µ—Å—Å–∏—è",
                ["preview_position"] = "üìê –ü–æ–∑–∏—Ü–∏—è",
                ["preview_direction"] = "‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                ["preview_context"] = "üß© –ö–æ–Ω—Ç–µ–∫—Å—Ç",
                ["preview_setup"] = "üß† –°–µ—Ç–∞–ø",
                ["preview_result"] = "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç",
                ["preview_rr"] = "‚öñÔ∏è R:R",
                ["preview_risk"] = "‚ö†Ô∏è –†–∏—Å–∫",
                ["preview_profit"] = "üìà –ü—Ä–∏–±—ã–ª—å",
                ["preview_emotions"] = "üòÉ –≠–º–æ—Ü–∏–∏",
                ["preview_entry_details"] = "üîç –î–µ—Ç–∞–ª–∏ –≤—Ö–æ–¥–∞",
                ["preview_note"] = "üìù –ó–∞–º–µ—Ç–∫–∞",
                ["preview_empty_value"] = "-",
                
                // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
                ["history_filter_title"] = "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:",
                ["history_filter_period"] = "–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥",
                ["history_filter_all_tickers"] = "–í—Å–µ —Ç–∏–∫–µ—Ä—ã",
                ["history_filter_pnl_gt_1"] = ">1%",
                ["history_filter_pnl_lt_minus_1"] = "<-1%",
                ["history_filter_direction_long"] = "Long",
                ["history_filter_direction_short"] = "Short",
                ["history_filter_clear_active"] = "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ",
                ["history_filter_ticker_label"] = "–¢–∏–∫–µ—Ä",
                ["history_filter_pnl_label"] = "PnL"
            },
            // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã (–º–æ–∂–Ω–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
            ["en"] = new Dictionary<string, string>
            {
                ["welcome"] = "üöÄ Welcome to TradingBot Pro!\n\nüìä Your professional assistant for trading analysis and performance improvement.\n\nüí° Key capabilities:\n‚Ä¢ üì∏ Automatic data extraction from screenshots\n‚Ä¢ ‚å®Ô∏è Intuitive manual trade entry\n‚Ä¢ üìà Advanced analytics and reports\n‚Ä¢ üåê Notion integration for team collaboration\n‚Ä¢ üíæ Secure local storage\n‚Ä¢ üìä Detailed charts and metrics\n\nüéØ Click 'Next' for a quick tutorial!",
                ["onboarding_1"] = "üì• Adding Deals\n\nYou have two ways:\n\nüì∏ Screenshot: Send a photo of your terminal screen - I'll automatically extract data\n\n‚å®Ô∏è Manual entry: Step-by-step filling of all deal fields\n\nBoth methods are equally effective!",
                ["onboarding_2"] = "üìä Analytics and Statistics\n\nAfter adding deals, you'll get:\n\nüìà Detailed statistics by periods\nüìä Equity and P&L charts\nüéØ Win rate and streak analysis\nüìÖ Reports by days/weeks/months\n\nAll information in a convenient format!",
                ["onboarding_3"] = "‚öôÔ∏è Settings and Integrations\n\nConfigure the bot for yourself:\n\nüåê Interface language (RU/EN)\nüîî Notifications about important events\nüìä Notion integration for team work\nüíæ Local database for privacy\n\nüåê Personal Notion integration:\n‚Ä¢ Connect your own database\n‚Ä¢ Use custom dictionaries\n‚Ä¢ Sync your trades\n\nüîß Settings menu:\n‚Ä¢ Language and notification management\n‚Ä¢ Personal Notion connection\n‚Ä¢ Favorite tickers setup\n‚Ä¢ Personal dictionaries\n\nReady to start? Click 'Main Menu'!",
                ["main_menu"] = "üéØ TradingBot - Your Trading Assistant\n\nüìä Today's Statistics:\nüìÖ Deals: {0} | üìà PnL: {1} | ‚úÖ Win Rate: {2}\n\nüöÄ What would you like to do?\n\n‚ûï Add new deal\nüìà View statistics\nüìú Deal history\n‚öôÔ∏è Bot settings\nüÜò Help and support",
                ["main_menu_button"] = "‚óÄÔ∏è Main Menu",
                ["skip"] = "‚û° Skip",
                ["cancel"] = "üö´ Cancel",
                ["confirm"] = "‚úÖ Confirm",
                ["edit"] = "‚úèÔ∏è Edit",
                ["delete"] = "üóë Delete",
                ["please_use_buttons"] = "üëá Please use the buttons below for navigation.",
                ["other"] = "Other...",
                ["prefill_last"] = "As in last",
                ["input_manually"] = "‚å®Ô∏è Enter manually",
                
                // English versions of Notion settings texts
                ["notion_settings"] = "üåê Notion Settings:",
                ["notion_enabled"] = "‚úÖ Notion connected",
                ["notion_disabled"] = "‚ùå Notion disconnected",
                ["notion_connect"] = "üîó Connect Notion",
                ["notion_disconnect"] = "üîå Disconnect Notion",
                ["notion_token"] = "üîë Enter token",
                ["notion_database"] = "üóÑÔ∏è Enter Database ID",
                ["notion_test"] = "üß™ Test connection",
                ["notion_status"] = "üìä Connection status",
                ["notion_token_input"] = "üîë Enter your Notion Integration Token:\n\nüìã Instructions:\n1Ô∏è‚É£ Go to https://www.notion.so/my-integrations\n2Ô∏è‚É£ Click '+ New integration'\n3Ô∏è‚É£ Enter name and select workspace\n4Ô∏è‚É£ Copy the secret token\n5Ô∏è‚É£ Send it in the next message",
                ["notion_database_input"] = "üóÑÔ∏è Enter Database ID or URL of your Notion database:\n\nüìã Instructions:\n1Ô∏è‚É£ Open your database in Notion\n2Ô∏è‚É£ Click 'Share' in the top right corner\n3Ô∏è‚É£ Find the created integration and invite it\n4Ô∏è‚É£ Copy ID from URL (part after notion.so/ and before ?v=)\n5Ô∏è‚É£ Send the ID in the next message",
                ["notion_connection_success"] = "‚úÖ Successfully connected to Notion!\n\nNow your trades will be synchronized with your personal database.",
                ["notion_connection_failed"] = "‚ùå Failed to connect to Notion.\n\nCheck:\n‚Ä¢ Token correctness\n‚Ä¢ Database ID correctness\n‚Ä¢ Integration access to database\n‚Ä¢ API version (should be 2022-06-28)",
                ["notion_token_invalid"] = "‚ö†Ô∏è Token is invalid. Check the input.",
                ["notion_database_invalid"] = "‚ö†Ô∏è Database ID is invalid. Check the input.",
                ["notion_already_connected"] = "‚ÑπÔ∏è Notion is already connected. Use 'Disconnect' to change settings.",
                ["notion_not_connected"] = "‚ÑπÔ∏è Notion is not connected. First connect the integration.",
                ["notion_disconnected"] = "‚úÖ Notion successfully disconnected. Your trades will no longer be synchronized.",
                ["notion_help"] = "üìö Notion Connection Help:\n\nüîë Integration Token:\n‚Ä¢ Create integration at https://www.notion.so/my-integrations\n‚Ä¢ Copy the secret token\n\nüóÑÔ∏è Database ID:\n‚Ä¢ Open database in Notion\n‚Ä¢ Copy ID from URL\n‚Ä¢ Grant access to integration\n\n‚ùì Need help? Check Notion documentation",
                ["notion_disconnected"] = "‚úÖ Notion successfully disconnected. Your trades will no longer be synchronized.",
                ["notion_help"] = "üìö Notion Connection Help:\n\nüîë Integration Token:\n‚Ä¢ Create integration at https://www.notion.so/my-integrations\n‚Ä¢ Copy the secret token\n\nüóÑÔ∏è Database ID:\n‚Ä¢ Open database in Notion\n‚Ä¢ Copy ID from URL\n‚Ä¢ Grant access to integration\n\n‚ùì Need help? Check Notion documentation",
                ["notion_settings"] = "üåê Notion Settings",
                ["notion_enabled"] = "‚úÖ Notion connected",
                ["notion_disabled"] = "‚ùå Notion not connected",
                ["notion_connect"] = "üîó Connect Notion",
                ["notion_disconnect"] = "üîå Disconnect Notion",
                ["notion_token"] = "üîë Change token",
                ["notion_database"] = "üóÑÔ∏è Change database",
                ["notion_test"] = "üß™ Test connection",
                ["notion_database_input"] = "üóÑÔ∏è Enter Database ID or URL of your Notion database:\n\nüìã Instructions:\n1Ô∏è‚É£ Open your database in Notion\n2Ô∏è‚É£ Click 'Share' in the top right corner\n3Ô∏è‚É£ Find the created integration and invite it\n4Ô∏è‚É£ Copy ID from URL (part after notion.so/ and before ?v=)\n5Ô∏è‚É£ Send the ID in the next message",

                // –¢–µ–∫—Å—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                ["notifications_enabled"] = "üîî Notifications enabled!",
                ["notifications_disabled"] = "üîï Notifications disabled!",
                ["ticker_added"] = "‚úÖ Ticker {0} added to favorites!",
                ["ticker_removed"] = "üóëÔ∏è Ticker {0} removed from favorites!",
                ["back"] = "‚¨ÖÔ∏è Back",
                ["add_ticker"] = "‚ûï Add Ticker",
                ["remove_ticker"] = "üóëÔ∏è Remove Ticker",
                ["support"] = "üÜò Support",
                ["whatsnew"] = "üì£ What's new",
                ["back_to_settings"] = "‚¨ÖÔ∏è Back to settings",
                ["period_week"] = "Week",
                ["period_month"] = "Month",
                ["period_all"] = "All time",
                ["validation_error"] = "‚ö†Ô∏è Trade validation error:",
                ["stats_menu"] = "üìä Statistics:",
                ["stats_result"] = "üìä Statistics for {0}:\n\nüìà Total trades: {1}\nüí∞ Total PnL: {2}%\n‚úÖ Profitable: {3}\n‚ùå Losing: {4}\nüéØ Win rate: {5}%",
                ["equity_curve"] = "üìà Equity curve:",
                ["no_trades"] = "üì≠ No trades to display",
                ["history_filters"] = "üîç History filters:",
                ["history_page"] = "Page {0} of {1}",
                ["export"] = "üíæ Export to CSV",
                ["more"] = "‚Ä¶More",
                ["filter_by_date"] = "üìÖ By date",
                ["filter_by_ticker"] = "üìà By ticker",
                ["filter_by_direction"] = "‚Üï By direction",
                ["filter_by_result"] = "‚úÖ/‚ùå By result",
                
                // Localization for trade previews
                ["preview_ticker"] = "üìå Ticker",
                ["preview_account"] = "üßæ Account",
                ["preview_session"] = "üïí Session",
                ["preview_position"] = "üìê Position",
                ["preview_direction"] = "‚ÜïÔ∏è Direction",
                ["preview_context"] = "üß© Context",
                ["preview_setup"] = "üß† Setup",
                ["preview_result"] = "üéØ Result",
                ["preview_rr"] = "‚öñÔ∏è R:R",
                ["preview_risk"] = "‚ö†Ô∏è Risk",
                ["preview_profit"] = "üìà Profit",
                ["preview_emotions"] = "üòÉ Emotions",
                ["preview_entry_details"] = "üîç Entry Details",
                ["preview_note"] = "üìù Note",
                ["preview_empty_value"] = "-",
                
                // Localization for history filters
                ["history_filter_title"] = "üîç Select history filter:",
                ["history_filter_period"] = "Current period",
                ["history_filter_all_tickers"] = "All tickers",
                ["history_filter_pnl_gt_1"] = ">1%",
                ["history_filter_pnl_lt_minus_1"] = "<-1%",
                ["history_filter_direction_long"] = "Long",
                ["history_filter_direction_short"] = "Short",
                ["history_filter_clear_active"] = "üßπ Clear active",
                ["history_filter_ticker_label"] = "Ticker",
                ["history_filter_pnl_label"] = "PnL",
                
                // New keys for improved error messages
                ["error_what_happened"] = "What happened",
                ["error_what_to_do"] = "What to do",
                ["error_next_step"] = "Next step",
                ["error_unknown"] = "Unknown error",
                
                // –¢–µ–∫—Å—Ç—ã —à–∞–≥–æ–≤ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
                ["step_1"] = "üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 1/14: Select ticker",
                ["step_2"] = "üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 2/14: Select account",
                ["step_3"] = "üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 3/14: Select session",
                ["step_4"] = "üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 4/14: Select position (LONG/SHORT)",
                ["step_5"] = "üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 5/14: Select direction (LONG/SHORT)",
                ["step_6"] = "üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 6/14: Select trade context",
                ["step_7"] = "üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 7/14: Select setup/strategy",
                ["step_8"] = "üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 8/14: Enter risk (%)",
                ["step_9"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú Step 9/14: Enter R:R ratio",
                ["step_10"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú Step 10/14: Select trade result",
                ["step_11"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú‚¨ú Step 11/14: Enter profit (%)",
                ["step_12"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú‚¨ú Step 12/14: Select emotions",
                ["step_13"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©‚¨ú Step 13/14: Enter entry details",
                ["step_14"] = "üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü© Step 14/14: Enter note",
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
                ["trade_preview"] = "‚úÖ Check entered data:\n\nüìå Ticker: {0}\nüìå Account: {1}\nüìå Session: {2}\nüìå Position: {3}\nüìå Direction: {4}\nüìå Context: {5}\nüìå Setup: {6}\nüìå Result: {7}\nüìå R:R = {8}\nüìå Risk: {9}%\nüìå Profit: {10}%\nüòÉ Emotions: {11}\nüîç Entry details: {12}\nüìù Note: {13}",
                ["confirm_trade"] = "Save trade?",
                ["edit_field"] = "‚úèÔ∏è Which field to edit?",
                ["pending_trades"] = "‚è≥ Active trades:\n{0}",
                ["no_pending_trades"] = "‚è≥ No active trades.",
                ["advanced_stats"] = "üìà Trades: {0}\nTotal PnL: {1}%\nAverage PnL: {2}%\nBest: {3}%\nWorst: {4}%\nWin Rate: {5}%",
                ["date_label"] = "üìÖ Date",
                ["pnl_label"] = "üìà Cumulative PnL",
                ["error_graph"] = "‚ö†Ô∏è Error creating graph.",
                ["export_success"] = "üìÑ Export completed successfully!",
                
                // –¢–µ–∫—Å—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞
                ["input_ticker"] = "üìù Enter ticker (e.g.: BTC/USDT):",
                ["input_account"] = "üìù Enter account name:",
                ["input_session"] = "üìù Enter trading session:",
                ["input_position"] = "üìù Enter position type:",
                ["input_direction"] = "üìù Enter direction:",
                ["input_risk"] = "üìù Enter risk size in %:",
                ["input_rr"] = "üìù Enter R:R ratio:",
                ["input_profit"] = "üìù Enter profit in %:",
                ["input_context"] = "üìù Enter trade context:",
                ["input_setup"] = "üìù Enter setup/strategy:",
                ["input_result"] = "üìù Enter trade result:",
                ["input_emotions"] = "üìù Enter emotions:",
                ["input_entry"] = "üìù Enter entry details:",
                ["input_note"] = "üìù Enter note:",
                
                // –¢–µ–∫—Å—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                ["ticker_added"] = "‚úÖ Ticker {0} added to favorites!",
                ["ticker_removed"] = "üóëÔ∏è Ticker {0} removed from favorites!",
                ["add_ticker"] = "‚ûï Add ticker",
                ["remove_ticker"] = "üóëÔ∏è Remove ticker",
                ["retry"] = "üîÑ Retry",
                ["help_menu"] = "üí° Select help section:",
                ["settings_menu"] = "‚öôÔ∏è Settings:",
                ["settings_updated"] = "‚úÖ Settings updated!",
                ["settings_reset"] = "üîÑ Settings reset.",
                ["trade_expired"] = "‚è∞ Trade expired. Start over.",
                ["trade_deleted"] = "üóëÔ∏è Trade deleted.",
                ["trade_cancelled"] = "‚ùå Trade input cancelled.",
                ["trade_not_saved"] = "‚ùå Failed to save trade.",
                ["notion_save_error"] = "Check Notion API settings.",
                ["local_save_error"] = "Local database issues.",
                ["trade_saved"] = "‚úÖ Trade {0} (PnL={1}%) saved!",
                ["trade_saved_local"] = "üíæ Trade saved locally.",
                ["trade_sent_notion"] = "üåê Data sent to Notion.",
                ["win_streak"] = "üî• Win streak: {0} trades in a row!",
                ["loss_streak"] = "üíî Loss streak: {0} trades in a row. Don't give up!",
                ["error_occurred"] = "‚ö†Ô∏è An error occurred. Try again.",
                ["all_pending_cleared"] = "üßπ All active trades cleared.",
                ["support_contact"] = "üìû Contact support: @support_username",
                ["error_getting_image"] = "‚ùå Error getting image.",
                ["error_processing_image"] = "‚ùå Error processing image.",
                ["rate_limit"] = "‚è≥ Too many requests. Wait a minute.",
                ["notion_settings_saved"] = "‚úÖ Notion settings saved",
                
                // Buttons and UI elements
                ["main_menu_button"] = "üè† Main Menu",
                ["add_trade"] = "‚ûï Add Trade",
                ["my_stats"] = "üìà My Statistics",
                ["trade_history"] = "üìú Trade History",
                ["settings"] = "‚öôÔ∏è Settings",
                ["help"] = "üÜò Help",
                ["support"] = "üí¨ Support",
                ["next"] = "Next ‚ñ∂",
                ["start"] = "üöÄ Start!",
                ["back"] = "‚óÄ Back",
                ["skip_tutorial"] = "‚è≠Ô∏è Skip Tutorial",
                ["other"] = "Other",
                ["input_manually"] = "‚úèÔ∏è Enter Manually",
                ["prefill_last"] = "üîÑ Use Last",
                ["skip"] = "‚è≠Ô∏è Skip",
                ["cancel"] = "‚ùå Cancel",
                ["save"] = "‚úÖ Save",
                ["confirm"] = "‚úÖ Confirm",
                ["edit"] = "‚úèÔ∏è Edit",
                ["delete"] = "üóëÔ∏è Delete",
                ["edit_ticker"] = "üìå Ticker",
                ["edit_account"] = "üßæ Account",
                ["edit_session"] = "üïí Session",
                ["edit_position"] = "üìê Position",
                ["edit_direction"] = "‚ÜïÔ∏è Direction",
                ["edit_context"] = "üß© Context",
                ["edit_setup"] = "üß† Setup",
                ["edit_result"] = "üéØ Result",
                ["edit_rr"] = "‚öñÔ∏è R:R",
                ["edit_risk"] = "‚ö†Ô∏è Risk %",
                ["edit_profit"] = "üìà Profit %",
                ["edit_emotions"] = "üòÉ Emotions",
                ["edit_entry"] = "üîç Entry Details",
                ["edit_note"] = "üìù Note",
                ["language"] = "üåê Language",
                ["notifications"] = "üîî Notifications",
                ["favorite_tickers"] = "‚≠ê Favorite Tickers",
                ["notion_integration"] = "üåê Notion Integration",
                ["reset_settings"] = "üîÑ Reset Settings",
                ["back_to_main"] = "üè† Back to Main",
                ["stats_today"] = "üìä Today's Stats",
                ["stats_week"] = "üìä Week's Stats",
                ["stats_month"] = "üìä Month's Stats",
                ["stats_all_time"] = "üìä All Time Stats",
                ["export_data"] = "üìÑ Export Data",
                ["clear_history"] = "üßπ Clear History",
                ["about_bot"] = "‚ÑπÔ∏è About Bot",
                ["contact_support"] = "üìû Contact Support",
                ["version_info"] = "‚ÑπÔ∏è Version",
                ["changelog"] = "üìù Changelog"
            }
        };

        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ø–∏—Å–∫–∏ –æ–ø—Ü–∏–π (–ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∏–∑ Notion –∏–ª–∏ SQLite)
        private List<string> _emotionOptions = new();
        private List<string> _sessionOptions = new();
        private List<string> _accountOptions = new();
        private List<string> _contextOptions = new();
        private List<string> _setupOptions = new();
        private List<string> _resultOptions = new();
        private List<string> _positionOptions = new();
        private List<string> _directionOptions = new();

        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ (–¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —à–∞–≥–µ 1)
        public static readonly List<string> PopularTickers = new() { "BTC/USDT", "ETH/USDT", "SOL/USDT", "BNB/USDT", "EUR/USD", "XAU/USD" };

        // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ Notion/SQLite –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        private static readonly List<string> DefaultAccounts = new() { "üè¶ BingX", "üè¶ Binance", "üè¶ MEXC", "üè¶ Bybit", "üß™ Demo" };
        private static readonly List<string> DefaultSessions = new() { "ASIA", "LONDON", "NEW YORK", "FRANKFURT" };
        private static readonly List<string> DefaultPositionTypes = new() { "‚ö° Scalp", "‚è± Intraday", "üìÖ Swing", "üèãÔ∏è Position" };
        private static readonly List<string> DefaultDirections = new() { "Long", "Short" };
        private static readonly List<string> DefaultContexts = new() { "üìà Uptrend", "üìâ Downtrend", "‚ûñ Range" };
        private static readonly List<string> DefaultSetups = new() { "‚ÜóÔ∏è Continuation (CONT)", "üìà Breakout", "üîÑ Reversal (REVR)", "üîÅ Double Top/Bottom", "üë§ Head & Shoulders" };
        private static readonly List<string> DefaultResults = new() { "TP", "SL", "BE" };
        private static readonly List<string> DefaultEmotions = new() { "üòå Calm", "üéØ Focused", "üò® Fear", "üòµ‚Äçüí´ FOMO" };

        public string GetText(string key, string language, params object[] args)
        {
            if (!_resources.TryGetValue(language, out var dict) || !dict.ContainsKey(key))
                return key;
            var text = dict[key];
            return args.Length > 0 ? string.Format(text, args) : text;
        }

        public InlineKeyboardMarkup GetMainMenu(UserSettings settings)
        {
            // –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–µ–Ω—é, –±–µ–∑ "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"
            var buttons = new List<InlineKeyboardButton[]>
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(GetText("add_trade", settings.Language), "start_trade"),
                    InlineKeyboardButton.WithCallbackData(GetText("my_stats", settings.Language), "stats")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(GetText("trade_history", settings.Language), "history"),
                    InlineKeyboardButton.WithCallbackData(GetText("settings", settings.Language), "settings")
                },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("help", settings.Language), "help") }
            };
            return new InlineKeyboardMarkup(buttons);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        /// </summary>
        public async Task<InlineKeyboardMarkup> GetSmartMainMenuAsync(UserSettings settings, long userId)
        {
            var buttons = new List<InlineKeyboardButton[]>();
            
            // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            buttons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData(GetText("add_trade", settings.Language), "start_trade"),
                InlineKeyboardButton.WithCallbackData(GetText("my_stats", settings.Language), "stats")
            });
            
            // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            var quickActions = await GetQuickActionsAsync(userId, settings.Language);
            if (quickActions.Any())
            {
                buttons.Add(quickActions.Select(a => InlineKeyboardButton.WithCallbackData(a.Text, a.Callback)).ToArray());
            }
            
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            buttons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData(GetText("trade_history", settings.Language), "history"),
                InlineKeyboardButton.WithCallbackData(GetText("settings", settings.Language), "settings")
            });
            
            // –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            buttons.Add(new[]
            {
                InlineKeyboardButton.WithCallbackData(GetText("help", settings.Language), "help"),
                InlineKeyboardButton.WithCallbackData(GetText("support", settings.Language), "support")
            });
            
            return new InlineKeyboardMarkup(buttons);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        /// </summary>
        public string GetEnhancedMainMenuText(UserSettings settings, int totalTrades = 0, decimal totalPnL = 0, double winRate = 0)
        {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            var greeting = GetPersonalizedGreeting(settings.Language);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            var coloredPnL = GetColoredPnL((double)totalPnL);
            var coloredWinRate = GetColoredWinRate(winRate);
            
            var baseText = GetText("main_menu", settings.Language, totalTrades, coloredPnL, coloredWinRate);
            
            return $"{greeting}\n\n{baseText}";
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        private async Task<List<QuickAction>> GetQuickActionsAsync(long userId, string language)
        {
            var actions = new List<QuickAction>();
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ç.–¥.
            
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            return actions;
        }

        public InlineKeyboardMarkup GetErrorKeyboard(UserSettings settings)
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(GetText("retry", settings.Language), "retry"),
                    InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main")
                }
            });
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetOnboardingScreen(int step, string language)
        {
            string text = step switch
            {
                1 => GetText("onboarding_1", language),
                2 => GetText("onboarding_2", language),
                3 => GetText("onboarding_3", language),
                _ => GetText("welcome", language)
            };

            var buttons = new List<InlineKeyboardButton[]>();
            
            if (step < 3)
            {
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("next", language), $"onboarding_{step + 1}") });
            }
            else
            {
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("start", language), "main") });
            }

            if (step > 1)
            {
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("back", language), $"onboarding_{step - 1}") });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ" –Ω–∞ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–∞—Ö
            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("skip_tutorial", language), "main") });

            return (text, new InlineKeyboardMarkup(buttons));
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetTradeInputScreen(Trade trade, int step, UserSettings settings, string tradeId, Trade? lastTrade = null)
        {
            // –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –ø—Ä–µ–≤—å—é —Å —ç–º–æ–¥–∑–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
            var ctx = (trade.Context != null && trade.Context.Any()) ? string.Join(", ", trade.Context) : GetText("preview_empty_value", settings.Language);
            var setup = (trade.Setup != null && trade.Setup.Any()) ? string.Join(", ", trade.Setup) : GetText("preview_empty_value", settings.Language);
            var emos = (trade.Emotions != null && trade.Emotions.Any()) ? string.Join(", ", trade.Emotions) : GetText("preview_empty_value", settings.Language);
            string formattedPreview =
                GetText("preview_ticker", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Ticker) ? GetText("preview_empty_value", settings.Language) : trade.Ticker) + "\n" +
                GetText("preview_account", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Account) ? GetText("preview_empty_value", settings.Language) : trade.Account) + "\n" +
                GetText("preview_session", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Session) ? GetText("preview_empty_value", settings.Language) : trade.Session) + "\n" +
                GetText("preview_position", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Position) ? GetText("preview_empty_value", settings.Language) : trade.Position) + "\n" +
                GetText("preview_direction", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Direction) ? GetText("preview_empty_value", settings.Language) : trade.Direction) + "\n" +
                GetText("preview_context", settings.Language) + ": " + ctx + "\n" +
                GetText("preview_setup", settings.Language) + ": " + setup + "\n" +
                GetText("preview_result", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Result) ? GetText("preview_empty_value", settings.Language) : trade.Result) + "\n" +
                GetText("preview_rr", settings.Language) + " = " + (string.IsNullOrWhiteSpace(trade.RR) ? GetText("preview_empty_value", settings.Language) : trade.RR) + "\n" +
                GetText("preview_risk", settings.Language) + ": " + (trade.Risk?.ToString("0.##") ?? GetText("preview_empty_value", settings.Language)) + "%\n" +
                GetText("preview_profit", settings.Language) + ": " + trade.PnL.ToString("0.##") + "%\n" +
                GetText("preview_emotions", settings.Language) + ": " + emos + "\n" +
                GetText("preview_entry_details", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.EntryDetails) ? GetText("preview_empty_value", settings.Language) : trade.EntryDetails) + "\n" +
                GetText("preview_note", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Note) ? GetText("preview_empty_value", settings.Language) : trade.Note);

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —à–∞–≥–∞ —Å fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
            string prompt;
            if (_resources.ContainsKey(settings.Language) && _resources[settings.Language].ContainsKey($"step_{step}"))
            {
                prompt = _resources[settings.Language][$"step_{step}"];
            }
            else
            {
                // Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã–π –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                prompt = _resources["ru"][$"step_{step}"];
            }
            var buttons = new List<InlineKeyboardButton[]>();

            switch (step)
            {
                case 1: // –¢–∏–∫–µ—Ä
                    var fav = settings.FavoriteTickers ?? new List<string>();
                    var recent = settings.RecentTickers ?? new List<string>();
                    var tickers = fav.Concat(recent).Concat(PopularTickers).Distinct().Take(6).ToList();
                    foreach (var t in tickers)
                        buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(t, $"set_ticker_{SanitizeCallbackData(t)}_trade_{tradeId}") });
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("other", settings.Language), $"input_ticker_trade_{tradeId}") });
                    if (!string.IsNullOrEmpty(lastTrade?.Ticker))
                        buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("prefill_last", settings.Language), $"set_ticker_{SanitizeCallbackData(lastTrade!.Ticker)}_trade_{tradeId}") });
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("skip", settings.Language), $"skip_trade_{tradeId}_step_{step}") });
                    break;

                case 2: // –ê–∫–∫–∞—É–Ω—Ç
                    var accounts = _accountOptions.Any() ? _accountOptions : DefaultAccounts;
                    foreach (var option in accounts)
                        buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(option, $"set_account_{SanitizeCallbackData(option)}_trade_{tradeId}") });
                    //buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("skip", settings.Language), $"skip_trade_{tradeId}_step_{step}") });
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_account_trade_{tradeId}") });
                    break;

                case 3: // –°–µ—Å—Å–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
                    var defaultSessions = new[] { "ASIA", "FRANKFURT", "LONDON", "NEW YORK" };
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üáØüáµ ASIA", $"set_session_ASIA_trade_{tradeId}"),
                        InlineKeyboardButton.WithCallbackData("üá©üá™ FRANKFURT", $"set_session_FRANKFURT_trade_{tradeId}")
                    });
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üá¨üáß LONDON", $"set_session_LONDON_trade_{tradeId}"),
                        InlineKeyboardButton.WithCallbackData("üá∫üá∏ NEW YORK", $"set_session_NEWYORK_trade_{tradeId}")
                    });

                    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ Notion/SQLite ‚Äî —Ç–æ–∂–µ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
                    var sessionBase = _sessionOptions.Any() ? _sessionOptions : DefaultSessions;
                    var customSessions = sessionBase.Where(s => !defaultSessions.Contains(s)).ToList();
                    for (int i = 0; i < customSessions.Count; i += 2)
                    {
                        if (i + 1 < customSessions.Count)
                            buttons.Add(new[]
                            {
                                InlineKeyboardButton.WithCallbackData(customSessions[i], $"set_session_{SanitizeCallbackData(customSessions[i])}_trade_{tradeId}"),
                                InlineKeyboardButton.WithCallbackData(customSessions[i + 1], $"set_session_{SanitizeCallbackData(customSessions[i + 1])}_trade_{tradeId}")
                            });
                        else
                            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(customSessions[i], $"set_session_{SanitizeCallbackData(customSessions[i])}_trade_{tradeId}") });
                    }

                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_session_trade_{tradeId}") });
                    break;

                case 4: // –ü–æ–∑–∏—Ü–∏—è (—Ç–∏–ø —Å–¥–µ–ª–∫–∏)
                    var positionTypes = _positionOptions.Any() ? _positionOptions : DefaultPositionTypes;
                    for (int i = 0; i < positionTypes.Count; i += 2)
                    {
                        if (i + 1 < positionTypes.Count)
                            buttons.Add(new[]
                            {
                                InlineKeyboardButton.WithCallbackData(positionTypes[i], $"set_position_{SanitizeCallbackData(positionTypes[i])}_trade_{tradeId}"),
                                InlineKeyboardButton.WithCallbackData(positionTypes[i + 1], $"set_position_{SanitizeCallbackData(positionTypes[i + 1])}_trade_{tradeId}")
                            });
                        else
                            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(positionTypes[i], $"set_position_{SanitizeCallbackData(positionTypes[i])}_trade_{tradeId}") });
                    }
                    break;

                case 5: // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
                    var defaultDirections = new[] { "Long", "Short" };
                    // Long/Short ‚Äî –≤ –æ–¥–∏–Ω —Ä—è–¥
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üü¢ LONG", $"set_direction_Long_trade_{tradeId}"),
                        InlineKeyboardButton.WithCallbackData("üî¥ SHORT", $"set_direction_Short_trade_{tradeId}")
                    });
                    // –ü–æ–¥—Ç–∏–ø —Å–¥–µ–ª–∫–∏ (Type): Reversal / Continuation –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üî¥ Reversal", $"set_setup_REVR_trade_{tradeId}"),
                        InlineKeyboardButton.WithCallbackData("üü¢ Continuation", $"set_setup_CONT_trade_{tradeId}")
                    });

                    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ ‚Äî –ø–æ –¥–≤–µ –≤ —Ä—è–¥
                    var baseDirections = _directionOptions.Any() ? _directionOptions : DefaultDirections;
                    var extraDirections = baseDirections.Where(d => !defaultDirections.Contains(d)).ToList();
                    for (int i = 0; i < extraDirections.Count; i += 2)
                    {
                        if (i + 1 < extraDirections.Count)
                            buttons.Add(new[]
                            {
                                                            InlineKeyboardButton.WithCallbackData(extraDirections[i], $"set_direction_{SanitizeCallbackData(extraDirections[i])}_trade_{tradeId}"),
                        InlineKeyboardButton.WithCallbackData(extraDirections[i + 1], $"set_direction_{SanitizeCallbackData(extraDirections[i + 1])}_trade_{tradeId}")
                            });
                        else
                            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(extraDirections[i], $"set_direction_{SanitizeCallbackData(extraDirections[i])}_trade_{tradeId}") });
                    }
                    break;

                case 6: // –ö–æ–Ω—Ç–µ–∫—Å—Ç
                    var contexts = _contextOptions.Any() ? _contextOptions : DefaultContexts;
                    foreach (var option in contexts)
                        buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(option, $"set_context_{SanitizeCallbackData(option)}_trade_{tradeId}") });
                    //buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("skip", settings.Language), $"skip_trade_{tradeId}_step_{step}") });
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_context_trade_{tradeId}") });
                    break;

                case 7: // –°–µ—Ç–∞–ø
                    var setups = _setupOptions.Any() ? _setupOptions : DefaultSetups;
                    foreach (var option in setups)
                        buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(option, $"set_setup_{SanitizeCallbackData(option)}_trade_{tradeId}") });
                                       // buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("skip", settings.Language), $"skip_trade_{tradeId}_step_{step}") });
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_setup_trade_{tradeId}") });
                    break;

                case 8: // –†–∏—Å–∫
                case 9: // R:R
                case 11: // –ü—Ä–∏–±—ã–ª—å
                    string field = step switch { 8 => "risk", 9 => "rr", 11 => "profit", _ => "" };
                    if (step == 8)
                    {
                        // Risk –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
                        buttons.Add(new[]
                        {
                            InlineKeyboardButton.WithCallbackData("0.5%", $"set_risk_0_5_trade_{tradeId}"),
                            InlineKeyboardButton.WithCallbackData("1%",   $"set_risk_1_0_trade_{tradeId}"),
                            InlineKeyboardButton.WithCallbackData("1.5%", $"set_risk_1_5_trade_{tradeId}"),
                            InlineKeyboardButton.WithCallbackData("2%",   $"set_risk_2_0_trade_{tradeId}"),
                            InlineKeyboardButton.WithCallbackData("3%",   $"set_risk_3_0_trade_{tradeId}")
                        });
                    }
                    if (step == 9)
                    {
                        // RR –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
                        buttons.Add(new[]
                        {
                            InlineKeyboardButton.WithCallbackData("1:1", $"set_rr_1_1_trade_{tradeId}"),
                            InlineKeyboardButton.WithCallbackData("1:2", $"set_rr_1_2_trade_{tradeId}"),
                            InlineKeyboardButton.WithCallbackData("1:3", $"set_rr_1_3_trade_{tradeId}"),
                            InlineKeyboardButton.WithCallbackData("1:4", $"set_rr_1_4_trade_{tradeId}")
                        });
                    }
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_{field}_trade_{tradeId}") });
                    break;

                case 10: // –†–µ–∑—É–ª—å—Ç–∞—Ç
                    // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏: TP / SL / BE
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üü¢ TP", $"set_result_TP_trade_{tradeId}"),
                        InlineKeyboardButton.WithCallbackData("üî¥ SL", $"set_result_SL_trade_{tradeId}"),
                        InlineKeyboardButton.WithCallbackData("üü† BE", $"set_result_BE_trade_{tradeId}")
                    });
                    var results = _resultOptions.Any() ? _resultOptions : DefaultResults;
                    foreach (var option in results)
                        buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(option, $"set_result_{SanitizeCallbackData(option)}_trade_{tradeId}") });
                    //buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("skip", settings.Language), $"skip_trade_{tradeId}_step_{step}") });
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_result_trade_{tradeId}") });
                    break;

                case 12: // –≠–º–æ—Ü–∏–∏
                    var emo = _emotionOptions.Any() ? _emotionOptions : DefaultEmotions;
                    // –ø–æ –¥–≤–µ –≤ —Ä—è–¥
                    for (int i = 0; i < emo.Count; i += 2)
                    {
                        if (i + 1 < emo.Count)
                            buttons.Add(new[]
                            {
                                                        InlineKeyboardButton.WithCallbackData(emo[i], $"set_emotions_{SanitizeCallbackData(emo[i])}_trade_{tradeId}"),
                        InlineKeyboardButton.WithCallbackData(emo[i + 1], $"set_emotions_{SanitizeCallbackData(emo[i + 1])}_trade_{tradeId}")
                            });
                        else
                            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(emo[i], $"set_emotions_{SanitizeCallbackData(emo[i])}_trade_{tradeId}") });
                    }
                    //buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("skip", settings.Language), $"skip_trade_{tradeId}_step_{step}") });
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_emotions_trade_{tradeId}") });
                    break;

                case 13: // –î–µ—Ç–∞–ª–∏ –≤—Ö–æ–¥–∞
                    // –ë—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∏–ø–∞ –≤—Ö–æ–¥–∞
                    buttons.Add(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üõí Market", $"set_entry_market_trade_{tradeId}"),
                        InlineKeyboardButton.WithCallbackData("üè∑ Limit",  $"set_entry_limit_trade_{tradeId}"),
                        InlineKeyboardButton.WithCallbackData("‚õî Stop",    $"set_entry_stop_trade_{tradeId}")
                    });
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_entry_trade_{tradeId}") });
                    break;

                case 14: // –ó–∞–º–µ—Ç–∫–∞
                   // buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(_resources[settings.Language]["skip"], $"skip_trade_{tradeId}_step_{step}") });
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_note_trade_{tradeId}") });
                    break;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (step > 1 && step <= 14)
                buttons.Add(new[] {
                    InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), $"back_trade_{tradeId}_step_{step}"),
                    InlineKeyboardButton.WithCallbackData(GetText("skip", settings.Language), $"skip_trade_{tradeId}_step_{step}")
                });

            buttons.Add(new[] {
                InlineKeyboardButton.WithCallbackData(GetText("cancel", settings.Language), "cancel"),
                InlineKeyboardButton.WithCallbackData(GetText("save", settings.Language), $"save_trade_{tradeId}")
            });

            return ($"{formattedPreview}\n\n{prompt}", new InlineKeyboardMarkup(buttons));
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetTradeConfirmationScreen(Trade trade, string tradeId, UserSettings settings)
        {
            string text =
                GetText("preview_ticker", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Ticker) ? GetText("preview_empty_value", settings.Language) : trade.Ticker) + "\n" +
                GetText("preview_account", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Account) ? GetText("preview_empty_value", settings.Language) : trade.Account) + "\n" +
                GetText("preview_session", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Session) ? GetText("preview_empty_value", settings.Language) : trade.Session) + "\n" +
                GetText("preview_position", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Position) ? GetText("preview_empty_value", settings.Language) : trade.Position) + "\n" +
                GetText("preview_direction", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Direction) ? GetText("preview_empty_value", settings.Language) : trade.Direction) + "\n" +
                GetText("preview_context", settings.Language) + ": " + ((trade.Context != null && trade.Context.Any()) ? string.Join(", ", trade.Context) : GetText("preview_empty_value", settings.Language)) + "\n" +
                GetText("preview_setup", settings.Language) + ": " + ((trade.Setup != null && trade.Setup.Any()) ? string.Join(", ", trade.Setup) : GetText("preview_empty_value", settings.Language)) + "\n" +
                GetText("preview_result", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Result) ? GetText("preview_empty_value", settings.Language) : trade.Result) + "\n" +
                GetText("preview_rr", settings.Language) + " = " + (string.IsNullOrWhiteSpace(trade.RR) ? GetText("preview_empty_value", settings.Language) : trade.RR) + "\n" +
                GetText("preview_risk", settings.Language) + ": " + (trade.Risk?.ToString("0.##") ?? GetText("preview_empty_value", settings.Language)) + "%\n" +
                GetText("preview_profit", settings.Language) + ": " + trade.PnL.ToString("0.##") + "%\n" +
                GetText("preview_emotions", settings.Language) + ": " + ((trade.Emotions != null && trade.Emotions.Any()) ? string.Join(", ", trade.Emotions) : GetText("preview_empty_value", settings.Language)) + "\n" +
                GetText("preview_entry_details", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.EntryDetails) ? GetText("preview_empty_value", settings.Language) : trade.EntryDetails) + "\n" +
                GetText("preview_note", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Note) ? GetText("preview_empty_value", settings.Language) : trade.Note);

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("confirm", settings.Language), $"confirm_trade_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("edit", settings.Language), $"edit_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("delete", settings.Language), $"delete_{tradeId}") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") }
            });
            return (text, keyboard);
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetEditFieldMenu(Trade trade, string tradeId, UserSettings settings)
        {
            string preview =
                GetText("preview_ticker", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Ticker) ? GetText("preview_empty_value", settings.Language) : trade.Ticker) + "\n" +
                GetText("preview_account", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Account) ? GetText("preview_empty_value", settings.Language) : trade.Account) + "\n" +
                GetText("preview_session", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Session) ? GetText("preview_empty_value", settings.Language) : trade.Session) + "\n" +
                GetText("preview_position", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Position) ? GetText("preview_empty_value", settings.Language) : trade.Position) + "\n" +
                GetText("preview_direction", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Direction) ? GetText("preview_empty_value", settings.Language) : trade.Direction) + "\n" +
                GetText("preview_context", settings.Language) + ": " + ((trade.Context != null && trade.Context.Any()) ? string.Join(", ", trade.Context) : GetText("preview_empty_value", settings.Language)) + "\n" +
                GetText("preview_setup", settings.Language) + ": " + ((trade.Setup != null && trade.Setup.Any()) ? string.Join(", ", trade.Setup) : GetText("preview_empty_value", settings.Language)) + "\n" +
                GetText("preview_result", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Result) ? GetText("preview_empty_value", settings.Language) : trade.Result) + "\n" +
                GetText("preview_rr", settings.Language) + " = " + (string.IsNullOrWhiteSpace(trade.RR) ? GetText("preview_empty_value", settings.Language) : trade.RR) + "\n" +
                GetText("preview_risk", settings.Language) + ": " + (trade.Risk?.ToString("0.##") ?? GetText("preview_empty_value", settings.Language)) + "%\n" +
                GetText("preview_profit", settings.Language) + ": " + trade.PnL.ToString("0.##") + "%\n" +
                GetText("preview_emotions", settings.Language) + ": " + ((trade.Emotions != null && trade.Emotions.Any()) ? string.Join(", ", trade.Emotions) : GetText("preview_empty_value", settings.Language)) + "\n" +
                GetText("preview_entry_details", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.EntryDetails) ? GetText("preview_empty_value", settings.Language) : trade.EntryDetails) + "\n" +
                GetText("preview_note", settings.Language) + ": " + (string.IsNullOrWhiteSpace(trade.Note) ? GetText("preview_empty_value", settings.Language) : trade.Note);

            // –ì–æ—Ç–æ–≤–∏–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å —ç–º–æ–¥–∑–∏
            var flat = new List<InlineKeyboardButton>
            {
                InlineKeyboardButton.WithCallbackData(GetText("edit_ticker", settings.Language), $"editfield_ticker_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_account", settings.Language), $"editfield_account_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_session", settings.Language), $"editfield_session_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_position", settings.Language), $"editfield_position_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_direction", settings.Language), $"editfield_direction_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_context", settings.Language), $"editfield_context_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_setup", settings.Language), $"editfield_setup_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_result", settings.Language), $"editfield_result_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_rr", settings.Language), $"editfield_rr_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_risk", settings.Language), $"editfield_risk_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_profit", settings.Language), $"editfield_profit_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_emotions", settings.Language), $"editfield_emotions_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_entry", settings.Language), $"editfield_entry_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("edit_note", settings.Language), $"editfield_note_trade_{tradeId}")
            };

            // –°–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ 2 –≤ —Ä—è–¥
            var rows = new List<InlineKeyboardButton[]>();
            for (int i = 0; i < flat.Count; i += 2)
            {
                if (i + 1 < flat.Count)
                    rows.Add(new[] { flat[i], flat[i + 1] });
                else
                    rows.Add(new[] { flat[i] });
            }

            // –í –∫–æ–Ω—Ü–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            rows.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") });

            return (preview, new InlineKeyboardMarkup(rows));
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetInputPrompt(string field, UserSettings settings, string tradeId)
        {
            string text = GetText($"input_{field}", settings.Language);
            var keyboard = new InlineKeyboardMarkup(new[]
                { new[] { InlineKeyboardButton.WithCallbackData(GetText("cancel", settings.Language), "cancel") } });
            return (text, keyboard);
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetHistoryFilterMenu(UserSettings settings, string period, string filter)
        {
            string text = GetText("history_filter_title", settings.Language) + "\n" + GetText("history_filter_period", settings.Language) + ": " + GetText($"period_{period}", settings.Language);
            var buttons = new List<InlineKeyboardButton[]>
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("history_filter_all_tickers", settings.Language), "historyfilter_ticker_all") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("history_filter_pnl_gt_1", settings.Language), "historyfilter_pnl_gt_1") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("history_filter_pnl_lt_minus_1", settings.Language), "historyfilter_pnl_lt_-1") },
                // Long/Short ‚Äî –ø–æ –¥–≤–µ –≤ —Ä—è–¥
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(GetText("history_filter_direction_long", settings.Language), "historyfilter_direction_Long"),
                    InlineKeyboardButton.WithCallbackData(GetText("history_filter_direction_short", settings.Language), "historyfilter_direction_Short")
                },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), "history") }
            };

            return (text, new InlineKeyboardMarkup(buttons));
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetPendingTradesScreen(
            List<(string TradeId, Trade Trade, int MessageId, DateTime CreatedAt)> pendingTrades, int page, int total,
            UserSettings settings)
        {
            string text = pendingTrades.Count == 0
                ? GetText("no_pending_trades", settings.Language)
                : GetText("pending_trades", settings.Language,
                    string.Join("\n",
                        pendingTrades.Select(t =>
                            $"{GetText("history_filter_ticker_label", settings.Language)}: {t.Trade.Ticker}, {GetText("history_filter_pnl_label", settings.Language)}: {t.Trade.PnL}% ({t.CreatedAt:yyyy-MM-dd HH:mm})")));

            int pageSize = 5;
            int totalPages = (int)Math.Ceiling(total / (double)pageSize);
            var buttons = new List<InlineKeyboardButton[]>();

            if (pendingTrades.Count > 0)
            {
                foreach (var (tradeId, trade, _, _) in pendingTrades)
                    buttons.Add(new[] { InlineKeyboardButton.WithCallbackData($"{trade.Ticker} ({trade.PnL}%)", $"edit_{tradeId}") });
                buttons.Add(new[]
                {
                    InlineKeyboardButton.WithCallbackData(GetText("history_filter_clear_active", settings.Language), "clearpending")
                });
            }

            var pagination = new List<InlineKeyboardButton>();
            if (page > 1) pagination.Add(InlineKeyboardButton.WithCallbackData("‚óÄ", $"pending_page_{page - 1}"));
            for (int i = Math.Max(1, page - 2); i <= Math.Min(totalPages, page + 2); i++)
                pagination.Add(InlineKeyboardButton.WithCallbackData(i == page ? $"[{i}]" : i.ToString(),
                    $"pending_page_{i}"));
            if (page < totalPages)
                pagination.Add(InlineKeyboardButton.WithCallbackData("‚ñ∂", $"pending_page_{page + 1}"));
            if (pagination.Any()) buttons.Add(pagination.ToArray());

            buttons.Add(new[]
                { InlineKeyboardButton.WithCallbackData(GetText("main_menu_button", settings.Language), "main") });
            return (text, new InlineKeyboardMarkup(buttons));
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetStatsMenu(UserSettings settings)
        {
            string text = GetText("stats_menu", settings.Language);
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_week", settings.Language), "statsperiod_week") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_month", settings.Language), "statsperiod_month") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_all", settings.Language), "statsperiod_all") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), "main") }
            });
            return (text, keyboard);
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetStatsResult(List<Trade> trades, string period, UserSettings settings)
        {
            int totalTrades = trades.Count;
            decimal totalPnL = trades.Sum(t => t.PnL);
            int profitable = trades.Count(t => t.PnL > 0);
            int losing = totalTrades - profitable;
            double winRate = totalTrades > 0 ? (double)profitable / totalTrades * 100 : 0;
            string periodText = GetText($"period_{period}", settings.Language);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            var coloredPnL = GetColoredPnL((double)totalPnL);
            var coloredWinRate = GetColoredWinRate(winRate);
            
            // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            var statsText = settings.Language == "ru" 
                ? $"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {periodText}:\n\nüìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {totalTrades}\nüí∞ –û–±—â–∏–π PnL: {coloredPnL}\n‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable}\n‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losing}\nüéØ –í–∏–Ω—Ä–µ–π—Ç: {coloredWinRate}"
                : $"üìä Statistics for {periodText}:\n\nüìà Total trades: {totalTrades}\nüí∞ Total PnL: {coloredPnL}\n‚úÖ Profitable: {profitable}\n‚ùå Losing: {losing}\nüéØ Win rate: {coloredWinRate}";
            
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), "main") }
            });
            return (statsText, keyboard);
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetAdvancedStatsMenu(UserSettings settings)
        {
            string text = GetText("equity_curve", settings.Language);
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_week", settings.Language), "advstatsperiod_week") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_month", settings.Language), "advstatsperiod_month") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("period_all", settings.Language), "advstatsperiod_all") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), "main") }
            });
            return (text, keyboard);
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetHistoryScreen(List<Trade> trades, int page, string period, string filter, UserSettings settings)
        {
            int pageSize = 5;
            var ordered = trades.OrderByDescending(t => t.Date).ToList();
            int totalPages = Math.Max(1, (int)Math.Ceiling(ordered.Count / (double)pageSize));
            page = Math.Min(Math.Max(page, 1), totalPages);
            var pageTrades = ordered.Skip((page - 1) * pageSize).Take(pageSize).ToList();

            var sb = new System.Text.StringBuilder();
            if (!ordered.Any())
            {
                sb.AppendLine(GetText("no_trades", settings.Language));
            }
            else
            {
                foreach (var t in pageTrades)
                {
                    string date = t.Date.ToString("dd.MM.yyyy HH:mm");
                    string ticker = t.Ticker ?? "-";
                    string direction = t.Direction ?? "-";
                    string ctx = (t.Context != null && t.Context.Any()) ? string.Join(", ", t.Context) : "-";
                    string sign = t.PnL >= 0 ? "+" : "-";
                    string absPnl = Math.Abs(t.PnL).ToString("F2");
                    sb.AppendLine($"üìÖ {date}");
                    sb.AppendLine($"üìà Ticker: {ticker}");
                    sb.AppendLine($"‚Üï Direction: {direction}");
                    sb.AppendLine($"üí∞ PnL: {sign}{absPnl}%");
                    sb.AppendLine($"üìÑ Context: {ctx}");
                    sb.AppendLine("");
                }
                sb.AppendLine(GetText("history_page", settings.Language, page, totalPages));
            }

            var buttons = new List<InlineKeyboardButton[]>();
            if (ordered.Any())
            {
                var pag = new List<InlineKeyboardButton>();
                if (page > 1) pag.Add(InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), $"history_page_{page - 1}_period_{period}_filter_{filter ?? "none"}"));
                if (page < totalPages) pag.Add(InlineKeyboardButton.WithCallbackData(GetText("more", settings.Language), $"history_page_{page + 1}_period_{period}_filter_{filter ?? "none"}"));
                if (pag.Any()) buttons.Add(pag.ToArray());

                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("history_filters", settings.Language), $"history_filter_menu") });
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("export", settings.Language), "export") });
            }

            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), "main") });
            return (sb.ToString(), new InlineKeyboardMarkup(buttons));
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetHistoryFiltersMenu(UserSettings settings)
        {
            string text = GetText("history_filters", settings.Language);
            var rows = new List<InlineKeyboardButton[]>
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("filter_by_date", settings.Language), "historyfilter_date_menu") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("filter_by_ticker", settings.Language), "historyfilter_ticker_menu") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("filter_by_direction", settings.Language), "historyfilter_direction_menu") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("filter_by_result", settings.Language), "historyfilter_result_menu") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), "history") }
            };
            return (text, new InlineKeyboardMarkup(rows));
        }

        public InlineKeyboardMarkup GetHistoryFilterSubmenu(string type, UserSettings settings)
        {
            var rows = new List<InlineKeyboardButton[]>();
            switch (type)
            {
                case "date":
                    rows.Add(new[] { InlineKeyboardButton.WithCallbackData(settings.Language == "ru" ? "7 –¥–Ω–µ–π" : "7 days", "historyfilter_date_7d") });
                    rows.Add(new[] { InlineKeyboardButton.WithCallbackData(settings.Language == "ru" ? "30 –¥–Ω–µ–π" : "30 days", "historyfilter_date_30d") });
                    rows.Add(new[] { InlineKeyboardButton.WithCallbackData(settings.Language == "ru" ? "–í—Å–µ –≤—Ä–µ–º—è" : "All time", "historyfilter_date_all") });
                    break;
                case "ticker":
                    if (settings.FavoriteTickers.Any())
                    {
                        foreach (var t in settings.FavoriteTickers.Take(12))
                        {
                            rows.Add(new[] { InlineKeyboardButton.WithCallbackData(t, $"historyfilter_ticker_{SanitizeCallbackData(t)}") });
                        }
                    }
                    rows.Add(new[] { InlineKeyboardButton.WithCallbackData(settings.Language == "ru" ? "–í—Å–µ" : "All", "historyfilter_ticker_all") });
                    break;
                case "direction":
                    rows.Add(new[] { InlineKeyboardButton.WithCallbackData("LONG", "historyfilter_direction_Long") });
                    rows.Add(new[] { InlineKeyboardButton.WithCallbackData("SHORT", "historyfilter_direction_Short") });
                    break;
                case "result":
                    rows.Add(new[] { InlineKeyboardButton.WithCallbackData(settings.Language == "ru" ? "‚úÖ –ü—Ä–æ—Ñ–∏—Ç" : "‚úÖ Profit", "historyfilter_result_profit") });
                    rows.Add(new[] { InlineKeyboardButton.WithCallbackData(settings.Language == "ru" ? "‚ùå –£–±—ã—Ç–æ–∫" : "‚ùå Loss", "historyfilter_result_loss") });
                    break;
            }
            rows.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), "history_filter_menu") });
            return new InlineKeyboardMarkup(rows);
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetTradeDetailScreen(Trade trade, UserSettings settings)
        {
            string text =
                $"üßæ –°–¥–µ–ª–∫–∞ #{trade.Id}\n" +
                $"üìÖ –î–∞—Ç–∞: {trade.Date:yyyy-MM-dd HH:mm}\n" +
                $"üìå –¢–∏–∫–µ—Ä: {trade.Ticker ?? "-"}\n" +
                $"üßæ –ê–∫–∫–∞—É–Ω—Ç: {trade.Account ?? "-"} | üïí –°–µ—Å—Å–∏—è: {trade.Session ?? "-"}\n" +
                $"üìê –ü–æ–∑–∏—Ü–∏—è: {trade.Position ?? "-"} | ‚ÜïÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade.Direction ?? "-"}\n" +
                $"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {trade.Result ?? "-"} | R:R: {trade.RR ?? "-"} | –†–∏—Å–∫: {trade.Risk?.ToString("0.##") ?? "-"}%\n" +
                $"üìà PnL: {trade.PnL:0.##}%\n" +
                $"üß© –ö–æ–Ω—Ç–µ–∫—Å—Ç: {(trade.Context != null && trade.Context.Any() ? string.Join(", ", trade.Context) : "-" )}\n" +
                $"üß† –°–µ—Ç–∞–ø: {(trade.Setup != null && trade.Setup.Any() ? string.Join(", ", trade.Setup) : "-" )}\n" +
                $"üôÇ –≠–º–æ—Ü–∏–∏: {(trade.Emotions != null && trade.Emotions.Any() ? string.Join(", ", trade.Emotions) : "-" )}\n" +
                $"üîç –î–µ—Ç–∞–ª–∏ –≤—Ö–æ–¥–∞: {trade.EntryDetails ?? "-"}\n" +
                $"üìù –ó–∞–º–µ—Ç–∫–∞: {trade.Note ?? "-"}";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), "history") }
            });
            return (text, keyboard);
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetFavoriteTickersMenu(UserSettings settings)
        {
            string text;
            if (settings.Language == "ru")
            {
                text = "üìà –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:\n\n";
                if (settings.FavoriteTickers.Any())
                {
                    text += string.Join(", ", settings.FavoriteTickers);
                }
                else
                {
                    text += "–ü—É—Å—Ç–æ";
                }
            }
            else
            {
                text = "üìà Favorite tickers:\n\n";
                if (settings.FavoriteTickers.Any())
                {
                    text += string.Join(", ", settings.FavoriteTickers);
                }
                else
                {
                    text += "Empty";
                }
            }

            var buttons = new List<InlineKeyboardButton[]>();
            foreach (var ticker in settings.FavoriteTickers)
            {
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData($"‚ùå {ticker}", $"remove_ticker_{SanitizeCallbackData(ticker)}") });
            }
            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("add_ticker", settings.Language), "add_favorite_ticker") });
            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("back_to_settings", settings.Language), "settings") });

            return (text, new InlineKeyboardMarkup(buttons));
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetRemoveFavoriteTickerMenu(UserSettings settings)
        {
            string text;
            if (settings.Language == "ru")
            {
                text = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:";
            }
            else
            {
                text = "‚ùå Select ticker to remove:";
            }
            
            var buttons = new List<InlineKeyboardButton[]>();

            foreach (var ticker in settings.FavoriteTickers)
            {
                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData($"‚ùå {ticker}", $"remove_ticker_{SanitizeCallbackData(ticker)}") });
            }

            buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("back_to_settings", settings.Language), "settings_tickers") });

            return (text, new InlineKeyboardMarkup(buttons));
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetHelpMenu(UserSettings settings)
        {
            string text;
            if (settings.Language == "ru")
            {
                text = "üí° –ü–æ–º–æ—â—å:\n\n" +
                       "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n" +
                       "‚å®Ô∏è –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–¥–µ–ª–∫—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
                       "üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n" +
                       "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö";
            }
            else
            {
                text = "üí° Help:\n\n" +
                       "üì∏ Send a screenshot of the deal for automatic filling\n" +
                       "‚å®Ô∏è Or create a deal manually through the main menu\n" +
                       "üìä View statistics and analyze results\n" +
                       "‚öôÔ∏è Configure the bot for yourself in settings";
            }

            var buttons = new List<InlineKeyboardButton[]>
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("support", settings.Language), "support") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("whatsnew", settings.Language), "whatsnew") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), "main") }
            };

            return (text, new InlineKeyboardMarkup(buttons));
        }

        public (string Text, InlineKeyboardMarkup Keyboard) GetSettingsMenu(UserSettings settings)
        {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            string text;
            if (settings.Language == "ru")
            {
                text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n" +
                       $"üåê –Ø–∑—ã–∫: {(settings.Language == "ru" ? "–†—É—Å—Å–∫–∏–π" : "English")}\n" +
                       $"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {(settings.NotificationsEnabled ? "–í–∫–ª—é—á–µ–Ω—ã ‚úÖ" : "–í—ã–∫–ª—é—á–µ–Ω—ã ‚ùå")}\n" +
                       $"üìà –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: {settings.FavoriteTickers.Count}\n" +
                       $"üß© Notion: {(settings.NotionEnabled ? "–ü–æ–¥–∫–ª—é—á–µ–Ω ‚úÖ" : "–û—Ç–∫–ª—é—á–µ–Ω ‚ùå")}";
            }
            else
            {
                text = "‚öôÔ∏è Settings:\n\n" +
                       $"üåê Language: {(settings.Language == "ru" ? "Russian" : "English")}\n" +
                       $"üîî Notifications: {(settings.NotificationsEnabled ? "Enabled ‚úÖ" : "Disabled ‚ùå")}\n" +
                       $"üìà Favorite tickers: {settings.FavoriteTickers.Count} items\n" +
                       $"üß© Notion: {(settings.NotionEnabled ? "Connected ‚úÖ" : "Disconnected ‚ùå")}";
            }

            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            var rows = new List<InlineKeyboardButton[]>
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("language", settings.Language), "settings_language") },
                new[] { InlineKeyboardButton.WithCallbackData(
                    settings.NotificationsEnabled 
                        ? GetText("notifications", settings.Language) + " üîï"
                        : GetText("notifications", settings.Language) + " üîî", 
                    "settings_notifications") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("favorite_tickers", settings.Language), "settings_tickers") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("notion_integration", settings.Language), "settings_notion") },
                new[] { InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), "main") }
            };

            return (text, new InlineKeyboardMarkup(rows));
        }

        /// <summary>
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ Notion
        /// </summary>
        public (string Text, InlineKeyboardMarkup Keyboard) GetNotionSettingsMenu(UserSettings settings)
        {
            // –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            var sb = new StringBuilder();
            sb.AppendLine("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Notion:\n");
            if (settings.NotionEnabled && !string.IsNullOrEmpty(settings.NotionIntegrationToken))
            {
                sb.AppendLine("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ");
                string shortToken = settings.NotionIntegrationToken.Length > 6
                    ? settings.NotionIntegrationToken.Substring(0, 6) + "‚Ä¶"
                    : settings.NotionIntegrationToken;
                sb.AppendLine($"–¢–æ–∫–µ–Ω: {shortToken}");
                if (!string.IsNullOrEmpty(settings.NotionDatabaseId))
                    sb.AppendLine($"Database ID: {settings.NotionDatabaseId}");
            }
            else
            {
                sb.AppendLine("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå");
                sb.AppendLine("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Notion –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.");
            }

            var rows = new List<InlineKeyboardButton[]>();
            if (settings.NotionEnabled && !string.IsNullOrEmpty(settings.NotionIntegrationToken))
            {
                // –æ–ø—Ü–∏–∏ –¥–ª—è —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("notion_disconnect", settings.Language), "notion_disconnect") });
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("notion_token", settings.Language), "notion_token") });
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("notion_database", settings.Language), "notion_database") });
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("notion_test", settings.Language), "notion_test") });
            }
            else
            {
                // –æ–ø—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("notion_connect", settings.Language), "notion_connect") });
            }
            // –Ω–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            rows.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("back", settings.Language), "settings") });

            return (sb.ToString().TrimEnd(), new InlineKeyboardMarkup(rows));
        }

        /// <summary>
        /// –≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ Notion
        /// </summary>
        public (string Text, InlineKeyboardMarkup Keyboard) GetNotionTokenPrompt(UserSettings settings)
        {
            string text = GetText("notion_token_input", settings.Language);
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("cancel", settings.Language), "notion_cancel") }
            });
            return (text, keyboard);
        }

        /// <summary>
        /// –≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ Database ID Notion
        /// </summary>
        public (string Text, InlineKeyboardMarkup Keyboard) GetNotionDatabasePrompt(UserSettings settings)
        {
            string text = GetText("notion_database_input", settings.Language);
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("cancel", settings.Language), "notion_cancel") }
            });
            return (text, keyboard);
        }

        /// <summary>
        /// –°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é Notion
        /// </summary>
        public string GetNotionHelpText(string language)
        {
            if (language == "ru")
            {
                return @"üåê –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Notion

üìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:

1Ô∏è‚É£ **–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏**
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://www.notion.so/my-integrations
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'New integration'
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'TradingBot')
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ 'Internal Integration Token'

2Ô∏è‚É£ **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**
   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion
   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (Database)
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫:
     - Ticker (Text)
     - Direction (Select: Long/Short)
     - PnL (Number)
     - Date (Date)
     - Account (Select)
     - Session (Select)
     - Position (Select)
     - Context (Select)
     - Setup (Select)
     - Result (Select)
     - Emotions (Multi-select)
     - RR (Text)
     - Risk (Number)

3Ô∏è‚É£ **–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞**
   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'Share' –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞ 'Can edit'

4Ô∏è‚É£ **–ü–æ–ª—É—á–µ–Ω–∏–µ Database ID**
   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL:
     https://notion.so/workspace/DATABASE_ID?v=...
   ‚Ä¢ –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å URL

5Ô∏è‚É£ **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–æ—Ç–µ**
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å Notion'
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ Database ID –∏–ª–∏ URL
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞";
            }
            else
            {
                return @"üåê How to connect your Notion database

üìã Step-by-step guide:

1Ô∏è‚É£ **Create Integration**
   ‚Ä¢ Go to https://www.notion.so/my-integrations
   ‚Ä¢ Click 'New integration'
   ‚Ä¢ Enter name (e.g., 'TradingBot')
   ‚Ä¢ Select workspace
   ‚Ä¢ Copy 'Internal Integration Token'

2Ô∏è‚É£ **Prepare Database**
   ‚Ä¢ Create new page in Notion
   ‚Ä¢ Add database
   ‚Ä¢ Configure properties for trades:
     - Ticker (Text)
     - Direction (Select: Long/Short)
     - PnL (Number)
     - Date (Date)
     - Account (Select)
     - Session (Select)
     - Position (Select)
     - Context (Select)
     - Setup (Select)
     - Result (Select)
     - Emotions (Multi-select)
     - RR (Text)
     - Risk (Number)

3Ô∏è‚É£ **Grant Access**
   ‚Ä¢ Open created database
   ‚Ä¢ Click 'Share' in top right
   ‚Ä¢ Add created integration
   ‚Ä¢ Set permissions to 'Can edit'

4Ô∏è‚É£ **Get Database ID**
   ‚Ä¢ Open database in browser
   ‚Ä¢ Copy ID from URL:
     https://notion.so/workspace/DATABASE_ID?v=...
   ‚Ä¢ Or copy entire URL

5Ô∏è‚É£ **Connect in Bot**
   ‚Ä¢ Click 'Connect Notion'
   ‚Ä¢ Enter integration token
   ‚Ä¢ Enter Database ID or URL
   ‚Ä¢ Test connection

‚ùì If something doesn't work:
   ‚Ä¢ Check token correctness
   ‚Ä¢ Ensure integration is added to database
   ‚Ä¢ Check access permissions
   ‚Ä¢ Verify database has required properties";
            }
        }

        /// <summary>
        /// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ Notion
        /// </summary>
        public InlineKeyboardMarkup GetNotionHelpKeyboard(string language)
        {
            var rows = new List<InlineKeyboardButton[]>
            {
                new[] { InlineKeyboardButton.WithCallbackData(GetText("back_to_settings", language), "settings_notion") }
            };
            
            return new InlineKeyboardMarkup(rows);
        }

        // –ú–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –æ–ø—Ü–∏–π, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ /start –∏–ª–∏ /menu
        public void SetSelectOptions(List<string> strategies,
                                     List<string> emotionOptions,
                                     List<string> sessionOptions,
                                     List<string> accountOptions,
                                     List<string> contextOptions,
                                     List<string> setupOptions,
                                     List<string> resultOptions,
                                     List<string> positionOptions,
                                     List<string> directionOptions)
        {
            _emotionOptions = emotionOptions;
            _sessionOptions = sessionOptions;
            _accountOptions = accountOptions;
            _contextOptions = contextOptions;
            _setupOptions = setupOptions;
            _resultOptions = resultOptions;
            _positionOptions = positionOptions;
            _directionOptions = directionOptions;
        }

        public InlineKeyboardMarkup BuildOptionsKeyboard(string field,
                                                         List<string> options,
                                                         string tradeId,
                                                         UserSettings settings,
                                                         int page = 1,
                                                         int pageSize = 24,
                                                         int step = 0,
                                                         HashSet<string>? selected = null)
        {
            selected ??= new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            var recents = field switch
            {
                "ticker" => settings.RecentTickers,
                "direction" => settings.RecentDirections,
                _ => new List<string>()
            };
            var preferred = new HashSet<string>(recents.Take(5), StringComparer.OrdinalIgnoreCase);
            var ordered = options
                .OrderByDescending(o => preferred.Contains(o))
                .ThenBy(o => o)
                .ToList();

            int total = ordered.Count;
            int totalPages = Math.Max(1, (int)Math.Ceiling(total / (double)pageSize));
            page = Math.Min(Math.Max(page, 1), totalPages);
            var pageSlice = ordered.Skip((page - 1) * pageSize).Take(pageSize).ToList();

            var rows = new List<InlineKeyboardButton[]>();
            if (field.Equals("direction", StringComparison.OrdinalIgnoreCase) ||
                field.Equals("position", StringComparison.OrdinalIgnoreCase) ||
                field.Equals("session", StringComparison.OrdinalIgnoreCase))
            {
                // –ñ—ë—Å—Ç–∫–æ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
                for (int i = 0; i < pageSlice.Count && rows.Count < 8; i += 2)
                {
                    if (i + 1 < pageSlice.Count)
                        rows.Add(new[]
                        {
                            InlineKeyboardButton.WithCallbackData((selected.Contains(pageSlice[i]) ? "‚úÖ " : "") + pageSlice[i], $"set_{field}_{SanitizeCallbackData(pageSlice[i])}_trade_{tradeId}"),
                            InlineKeyboardButton.WithCallbackData((selected.Contains(pageSlice[i + 1]) ? "‚úÖ " : "") + pageSlice[i + 1], $"set_{field}_{SanitizeCallbackData(pageSlice[i + 1])}_trade_{tradeId}")
                        });
                    else
                        rows.Add(new[] { InlineKeyboardButton.WithCallbackData((selected.Contains(pageSlice[i]) ? "‚úÖ " : "") + pageSlice[i], $"set_{field}_{SanitizeCallbackData(pageSlice[i])}_trade_{tradeId}") });
                }
            }
            else
            {
                int i = 0;
                while (i < pageSlice.Count && rows.Count < 8)
                {
                    int len = pageSlice[i].Length;
                    int perRow = len <= 8 ? 4 : len <= 12 ? 3 : 2;
                    var row = new List<InlineKeyboardButton>();
                    for (int j = 0; j < perRow && i < pageSlice.Count; j++, i++)
                    {
                        string v = pageSlice[i];
                        string text = (selected.Contains(v) ? "‚úÖ " : "") + v;
                        row.Add(InlineKeyboardButton.WithCallbackData(text, $"set_{field}_{SanitizeCallbackData(v)}_trade_{tradeId}"));
                    }
                    rows.Add(row.ToArray());
                }
            }

            if (totalPages > 1)
            {
                var pag = new List<InlineKeyboardButton>();
                if (page > 1) pag.Add(InlineKeyboardButton.WithCallbackData("‚óÄ", $"more_{field}_page_{page - 1}_trade_{tradeId}"));
                pag.Add(InlineKeyboardButton.WithCallbackData($"[{page}/{totalPages}]", $"noop"));
                if (page < totalPages) pag.Add(InlineKeyboardButton.WithCallbackData("‚ñ∂", $"more_{field}_page_{page + 1}_trade_{tradeId}"));
                rows.Add(pag.ToArray());
            }

            if (step > 1 && step <= 14)
                rows.Add(new[] {
                    InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", $"back_trade_{tradeId}_step_{step}"),
                    InlineKeyboardButton.WithCallbackData(GetText("skip", settings.Language), $"skip_trade_{tradeId}_step_{step}")
                });

            rows.Add(new[] { InlineKeyboardButton.WithCallbackData(GetText("input_manually", settings.Language), $"input_{field}_trade_{tradeId}") });
            rows.Add(new[] {
                InlineKeyboardButton.WithCallbackData("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", $"save_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData(GetText("cancel", settings.Language), "cancel")
            });

            return new InlineKeyboardMarkup(rows);
        }

        // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –æ–ø—Ü–∏–∏ –ø–æ –µ—ë –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é callback_data
        public string? TryResolveOriginalOption(string field, string sanitized)
        {
            List<string> list = field.ToLowerInvariant() switch
            {
                "account" => _accountOptions,
                "session" => _sessionOptions,
                "position" => _positionOptions,
                "direction" => _directionOptions,
                "context" => _contextOptions,
                "setup" => _setupOptions,
                "result" => _resultOptions,
                "emotions" => _emotionOptions,
                // –î–ª—è —Ç–∏–∫–µ—Ä–∞ —Å–ø–∏—Å–∫–æ–≤ –Ω–µ—Ç, –≤–µ—Ä–Ω—ë–º null —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–∞–ø–∞—Å–Ω—É—é –ª–æ–≥–∏–∫—É
                _ => new List<string>()
            };

            // –ò—â–µ–º —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–∏–ª—É —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏
            foreach (var option in list)
            {
                if (SanitizeCallbackData(option) == sanitized)
                    return option;
            }

            return null;
        }

        // ==================== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø UX ====================

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Å–¥–µ–ª–æ–∫
        /// </summary>
        public string GetStepProgress(int currentStep, int totalSteps, string stepName, UserSettings settings)
        {
            var progress = (currentStep * 100) / totalSteps;
            var progressBar = string.Join("", Enumerable.Repeat("üü©", currentStep)) + string.Join("", Enumerable.Repeat("‚¨ú", totalSteps - currentStep));
            
            return $"""
            üìù {stepName}
            
            –®–∞–≥ {currentStep} –∏–∑ {totalSteps} ({progress}%)
            {progressBar}
            
            üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {GetStepHint(currentStep, settings.Language)}
            """;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–≥–∞
        /// </summary>
        private string GetStepHint(int step, string language)
        {
            var hints = language == "ru" ? _ruStepHints : _enStepHints;
            return hints.TryGetValue(step, out var hint) ? hint : hints[0];
        }

        /// <summary>
        /// –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —à–∞–≥–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        /// </summary>
        private readonly Dictionary<int, string> _ruStepHints = new()
        {
            { 1, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π" },
            { 2, "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ (Long/Short)" },
            { 3, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –ª–æ—Ç–∞—Ö" },
            { 4, "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞" },
            { 5, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö" },
            { 6, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö" },
            { 7, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é" },
            { 8, "–û–ø–∏—à–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –∏–¥–µ—é" },
            { 9, "–£–∫–∞–∂–∏—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ" },
            { 10, "–î–æ–±–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" },
            { 11, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ" },
            { 12, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ" },
            { 13, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è" },
            { 14, "–ì–æ—Ç–æ–≤–æ! –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞" }
        };

        /// <summary>
        /// –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —à–∞–≥–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
        /// </summary>
        private readonly Dictionary<int, string> _enStepHints = new()
        {
            { 1, "Choose ticker from list or enter new one" },
            { 2, "Specify position type (Long/Short)" },
            { 3, "Enter position size in lots" },
            { 4, "Specify entry price" },
            { 5, "Enter stop loss in percentage" },
            { 6, "Specify take profit in percentage" },
            { 7, "Select trading session" },
            { 8, "Describe trading idea" },
            { 9, "Specify emotional state" },
            { 10, "Add screenshot (optional)" },
            { 11, "Check all data" },
            { 12, "Confirm saving" },
            { 13, "Choose saving method" },
            { 14, "Done! Trade saved" }
        };

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è PnL
        /// </summary>
        public string GetColoredPnL(double pnl)
        {
            if (pnl > 0)
            {
                var emoji = pnl > 5 ? "üöÄ" : pnl > 2 ? "üìà" : "üü¢";
                return $"{emoji} +{pnl:F2}%";
            }
            if (pnl < 0)
            {
                var emoji = pnl < -5 ? "üí•" : pnl < -2 ? "üìâ" : "üî¥";
                return $"{emoji} {pnl:F2}%";
            }
            return $"‚ö™ {pnl:F2}%";
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Win Rate
        /// </summary>
        public string GetColoredWinRate(double winRate)
        {
            if (winRate >= 70) return $"üèÜ {winRate:F1}%";
            if (winRate >= 60) return $"ü•á {winRate:F1}%";
            if (winRate >= 50) return $"ü•à {winRate:F1}%";
            if (winRate >= 40) return $"ü•â {winRate:F1}%";
            return $"üìä {winRate:F1}%";
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ—Ä–∏–π
        /// </summary>
        public string GetColoredStreak(int streak, bool isWin)
        {
            if (isWin)
            {
                if (streak >= 10) return $"üî• {streak} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥!";
                if (streak >= 5) return $"‚ö° {streak} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥";
                return $"‚úÖ {streak} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥";
            }
            else
            {
                if (streak >= 5) return $"üíî {streak} —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥";
                return $"üìâ {streak} —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥";
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        /// </summary>
        public string GetPersonalizedGreeting(string language)
        {
            var timeOfDay = GetTimeOfDay();
            var greeting = timeOfDay switch
            {
                "morning" => language == "ru" ? "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ" : "üåÖ Good morning",
                "afternoon" => language == "ru" ? "‚òÄÔ∏è –î–æ–±—Ä—ã–π –¥–µ–Ω—å" : "‚òÄÔ∏è Good afternoon",
                "evening" => language == "ru" ? "üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä" : "üåÜ Good evening",
                "night" => language == "ru" ? "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏" : "üåô Good night",
                _ => language == "ru" ? "üëã –ü—Ä–∏–≤–µ—Ç" : "üëã Hello"
            };
            
            return greeting;
        }

        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
        /// </summary>
        private string GetTimeOfDay()
        {
            var hour = DateTime.Now.Hour;
            return hour switch
            {
                >= 5 and < 12 => "morning",
                >= 12 and < 17 => "afternoon",
                >= 17 and < 22 => "evening",
                _ => "night"
            };
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        /// </summary>
        public string GetUserFriendlyErrorMessage(string errorCode, string details = null, string language = "ru")
        {
            var baseMessage = GetErrorMessageBase(errorCode, language);
            var suggestion = GetErrorSuggestion(errorCode, language);
            var action = GetErrorAction(errorCode, language);
            
            var message = $"""
            {baseMessage}
            
            üîç {GetText("error_what_happened", language)}:
            {details ?? GetText("error_unknown", language)}
            
            üí° {GetText("error_what_to_do", language)}:
            {suggestion}
            
            üöÄ {GetText("error_next_step", language)}:
            {action}
            """;
            
            return message;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        /// </summary>
        private string GetErrorMessageBase(string errorCode, string language)
        {
            return errorCode switch
            {
                "validation_error" => language == "ru" ? "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" : "‚ö†Ô∏è Check entered data",
                "database_error" => language == "ru" ? "üíæ –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö" : "üíæ Database problem",
                "network_error" => language == "ru" ? "üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º" : "üåê Connection problem",
                "permission_error" => language == "ru" ? "üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" : "üîí Insufficient permissions",
                "timeout_error" => language == "ru" ? "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è" : "‚è∞ Timeout exceeded",
                "notion_error" => language == "ru" ? "üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å Notion" : "üåê Notion problem",
                "rate_limit_error" => language == "ru" ? "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤" : "‚è≥ Too many requests",
                _ => language == "ru" ? "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" : "‚ùå An error occurred"
            };
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ—à–µ–Ω–∏—é –æ—à–∏–±–∫–∏
        /// </summary>
        private string GetErrorSuggestion(string errorCode, string language)
        {
            if (language == "ru")
            {
                return errorCode switch
                {
                    "validation_error" => "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞\n‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª",
                    "database_error" => "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    "network_error" => "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏",
                    "permission_error" => "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                    "timeout_error" => "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö",
                    "notion_error" => "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω Notion\n‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                    "rate_limit_error" => "‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã\n‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    _ => "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫"
                };
            }
            else
            {
                return errorCode switch
                {
                    "validation_error" => "‚Ä¢ Check input correctness\n‚Ä¢ Make sure all fields are filled\n‚Ä¢ Use correct number format",
                    "database_error" => "‚Ä¢ Check internet connection\n‚Ä¢ Try again in a minute\n‚Ä¢ Contact support",
                    "network_error" => "‚Ä¢ Check internet connection\n‚Ä¢ Try to restart the bot\n‚Ä¢ Check network settings",
                    "permission_error" => "‚Ä¢ Check access rights\n‚Ä¢ Make sure you are authorized\n‚Ä¢ Contact administrator",
                    "timeout_error" => "‚Ä¢ Check internet speed\n‚Ä¢ Try again\n‚Ä¢ Reduce data size",
                    "notion_error" => "‚Ä¢ Check Notion token\n‚Ä¢ Make sure you have access\n‚Ä¢ Check database ID",
                    "rate_limit_error" => "‚Ä¢ Wait 1-2 minutes\n‚Ä¢ Reduce request frequency\n‚Ä¢ Use caching",
                    _ => "‚Ä¢ Try again\n‚Ä¢ Contact support\n‚Ä¢ Check error logs"
                };
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏
        /// </summary>
        private string GetErrorAction(string errorCode, string language)
        {
            if (language == "ru")
            {
                return errorCode switch
                {
                    "validation_error" => "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                    "database_error" => "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É",
                    "network_error" => "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ",
                    "permission_error" => "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                    "timeout_error" => "–£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ",
                    "notion_error" => "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion",
                    "rate_limit_error" => "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                    _ => "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                };
            }
            else
            {
                return errorCode switch
                {
                    "validation_error" => "Fix data and try again",
                    "database_error" => "Try again in a minute",
                    "network_error" => "Check connection and restart",
                    "permission_error" => "Contact administrator",
                    "timeout_error" => "Reduce data size or wait",
                    "notion_error" => "Check Notion settings",
                    "rate_limit_error" => "Wait and try again",
                    _ => "Contact support"
                };
            }
        }

        // ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê ====================

        /// <summary>
        /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–≤–æ–¥–∞ —Å–¥–µ–ª–æ–∫
        /// </summary>
        public void ShowProgressIndicator(string message, string language = "ru")
        {
            var progressMessage = language == "ru" 
                ? $"üìä [–ü—Ä–æ–≥—Ä–µ—Å—Å] {message}"
                : $"üìä [Progress] {message}";
            
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —á–∞—Ç
            Console.WriteLine(progressMessage);
        }

        /// <summary>
        /// –°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        /// </summary>
        public void HideProgressIndicator(string language = "ru")
        {
            var completionMessage = language == "ru" 
                ? "‚úÖ [–ü—Ä–æ–≥—Ä–µ—Å—Å] –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                : "‚úÖ [Progress] Completed";
            
            Console.WriteLine(completionMessage);
        }

        /// <summary>
        /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        /// </summary>
        public void DisplayStatistics(Statistics stats, string language = "ru")
        {
            var header = language == "ru" ? "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" : "Statistics:";
            Console.WriteLine(header);

            DisplayStat("–ü—Ä–∏–±—ã–ª—å", stats.Profit, language);
            DisplayStat("–£–±—ã—Ç–æ–∫", stats.Loss, language);
            DisplayStat("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫", stats.TradeCount, language);
        }

        /// <summary>
        /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        /// </summary>
        private void DisplayStat(string name, double value, string language)
        {
            var color = GetColorForValue(value);
            var resetColor = "\u001b[0m"; // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
            
            Console.WriteLine($"{name}: {color}{value}{resetColor}");
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è
        /// </summary>
        private string GetColorForValue(double value)
        {
            if (value > 0)
                return "\u001b[32m"; // –ó–µ–ª–µ–Ω—ã–π
            else if (value < 0)
                return "\u001b[31m"; // –ö—Ä–∞—Å–Ω—ã–π
            else
                return "\u001b[33m"; // –ñ–µ–ª—Ç—ã–π
        }
    }
}