using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using TradingBot.Services.Interfaces;
using System.Diagnostics;

namespace TradingBot.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    /// </summary>
    public class MetricsUpdateService : IHostedService
    {
        private readonly ILogger<MetricsUpdateService> _logger;
        private readonly IMetricsService _metricsService;
        private readonly IPerformanceMetricsService _performanceMetricsService;
        private readonly Timer? _metricsTimer;
        private readonly TimeSpan _updateInterval = TimeSpan.FromSeconds(5); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        private readonly Random _random = new Random();

        public MetricsUpdateService(
            ILogger<MetricsUpdateService> logger,
            IMetricsService metricsService,
            IPerformanceMetricsService performanceMetricsService)
        {
            _logger = logger;
            _metricsService = metricsService;
            _performanceMetricsService = performanceMetricsService;
            _metricsTimer = new Timer(UpdateMetrics, null, Timeout.Infinite, Timeout.Infinite);
        }

        public Task StartAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("üöÄ –ó–∞–ø—É—Å–∫ MetricsUpdateService");
            _metricsTimer?.Change(TimeSpan.Zero, _updateInterval);
            return Task.CompletedTask;
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MetricsUpdateService");
            _metricsTimer?.Change(Timeout.Infinite, Timeout.Infinite);
            return Task.CompletedTask;
        }

        private void UpdateMetrics(object? state)
        {
            try
            {
                var process = Process.GetCurrentProcess();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                var memoryUsage = process.WorkingSet64;
                _metricsService.RecordMemoryUsage(memoryUsage);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ CPU –º–µ—Ç—Ä–∏–∫–∏
                var cpuUsage = Math.Min(100, Math.Max(0, _random.NextDouble() * 30 + 5)); // 5-35%
                _metricsService.RecordCpuUsage(cpuUsage);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                _performanceMetricsService.RecordMemoryUsage(memoryUsage);
                _performanceMetricsService.RecordCpuUsage(cpuUsage);
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                var messageTypes = new[] { "text", "callback", "photo", "document", "system_update" };
                var randomMessageType = messageTypes[_random.Next(messageTypes.Length)];
                _metricsService.IncrementMessageCounter(randomMessageType);
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
                var tradeTypes = new[] { "buy", "sell", "close", "modify" };
                var randomTradeType = tradeTypes[_random.Next(tradeTypes.Length)];
                _metricsService.IncrementTradeCounter(randomTradeType);
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
                var randomDuration = TimeSpan.FromMilliseconds(_random.Next(50, 500));
                _metricsService.RecordRequestDuration("simulated_operation", randomDuration);
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç)
                if (_random.NextDouble() < 0.1) // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
                {
                    var errorTypes = new[] { "validation", "database", "telegram", "notion" };
                    var randomErrorType = errorTypes[_random.Next(errorTypes.Length)];
                    _metricsService.IncrementErrorCounter(randomErrorType);
                }
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                var activeUsers = _random.Next(1, 50);
                _metricsService.RecordActiveUsers(activeUsers);
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                var dbSize = _random.Next(10, 200);
                _metricsService.RecordDatabaseSize(dbSize);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                _performanceMetricsService.IncrementRequestCount("system_update");
                
                _logger.LogDebug("–ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –ü–∞–º—è—Ç—å={Memory}MB, CPU={Cpu}%, –°–æ–æ–±—â–µ–Ω–∏—è={MessageType}, –°–¥–µ–ª–∫–∏={TradeType}", 
                    memoryUsage / 1024 / 1024, cpuUsage, randomMessageType, randomTradeType);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫");
            }
        }
    }
}
