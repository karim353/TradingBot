using System;
using System.Collections.Generic;
using System.Linq;
using Telegram.Bot.Types.ReplyMarkups;
using TradingBot.Models;

namespace TradingBot.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram
    /// –í—ã–Ω–æ—Å–∏—Ç –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏–∑ UIManager –¥–ª—è –ª—É—á—à–µ–π –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
    /// </summary>
    public class KeyboardService
    {
        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –ø–æ–ª—è —Å–¥–µ–ª–∫–∏
        /// </summary>
        public InlineKeyboardMarkup BuildOptionsKeyboard(
            string field,
            List<string> options,
            string tradeId,
            UserSettings settings,
            int page = 1,
            int pageSize = 24,
            int step = 0,
            HashSet<string>? selected = null)
        {
            selected ??= new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
            var recents = field.ToLowerInvariant() switch
            {
                "ticker" => settings.RecentTickers,
                "direction" => settings.RecentDirections,
                "account" => settings.RecentAccounts,
                "session" => settings.RecentSessions,
                "position" => settings.RecentPositions,
                "context" => settings.RecentContexts,
                "setup" => settings.RecentSetups,
                "result" => settings.RecentResults,
                "emotions" => settings.RecentEmotions,
                _ => new List<string>()
            };
            
            var preferred = new HashSet<string>(recents.Take(5), StringComparer.OrdinalIgnoreCase);
            var ordered = options
                .OrderByDescending(o => preferred.Contains(o))
                .ThenBy(o => o)
                .ToList();

            int total = ordered.Count;
            int totalPages = Math.Max(1, (int)Math.Ceiling(total / (double)pageSize));
            page = Math.Min(Math.Max(page, 1), totalPages);
            var pageSlice = ordered.Skip((page - 1) * pageSize).Take(pageSize).ToList();

            var rows = new List<InlineKeyboardButton[]>();
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
            if (field.Equals("direction", StringComparison.OrdinalIgnoreCase) ||
                field.Equals("position", StringComparison.OrdinalIgnoreCase) ||
                field.Equals("session", StringComparison.OrdinalIgnoreCase))
            {
                // –ñ—ë—Å—Ç–∫–æ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
                for (int i = 0; i < pageSlice.Count && rows.Count < 8; i += 2)
                {
                    if (i + 1 < pageSlice.Count)
                        rows.Add(new[]
                        {
                            CreateOptionButton(pageSlice[i], field, tradeId, selected),
                            CreateOptionButton(pageSlice[i + 1], field, tradeId, selected)
                        });
                    else
                        rows.Add(new[] { CreateOptionButton(pageSlice[i], field, tradeId, selected) });
                }
            }
            else
            {
                // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
                int i = 0;
                while (i < pageSlice.Count && rows.Count < 8)
                {
                    int len = pageSlice[i].Length;
                    int perRow = len <= 8 ? 4 : len <= 12 ? 3 : 2;
                    var row = new List<InlineKeyboardButton>();
                    
                    for (int j = 0; j < perRow && i < pageSlice.Count; j++, i++)
                    {
                        row.Add(CreateOptionButton(pageSlice[i], field, tradeId, selected));
                    }
                    rows.Add(row.ToArray());
                }
            }

            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            if (totalPages > 1)
            {
                var paginationRow = new List<InlineKeyboardButton>();
                if (page > 1) 
                    paginationRow.Add(InlineKeyboardButton.WithCallbackData("‚óÄ", $"more_{field}_page_{page - 1}_trade_{tradeId}"));
                
                paginationRow.Add(InlineKeyboardButton.WithCallbackData($"[{page}/{totalPages}]", "noop"));
                
                if (page < totalPages) 
                    paginationRow.Add(InlineKeyboardButton.WithCallbackData("‚ñ∂", $"more_{field}_page_{page + 1}_trade_{tradeId}"));
                
                rows.Add(paginationRow.ToArray());
            }

            // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (step > 1 && step <= 14)
                rows.Add(new[] {
                    InlineKeyboardButton.WithCallbackData("‚óÄÔ∏è –ù–∞–∑–∞–¥", $"back_trade_{tradeId}_step_{step}"),
                    InlineKeyboardButton.WithCallbackData("‚û° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", $"skip_trade_{tradeId}_step_{step}")
                });

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            rows.Add(new[] { InlineKeyboardButton.WithCallbackData("‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", $"input_{field}_trade_{tradeId}") });
            rows.Add(new[] {
                InlineKeyboardButton.WithCallbackData("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", $"save_trade_{tradeId}"),
                InlineKeyboardButton.WithCallbackData("üö´ –û—Ç–º–µ–Ω–∞", "cancel")
            });

            return new InlineKeyboardMarkup(rows);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø—Ü–∏–∏
        /// </summary>
        private InlineKeyboardButton CreateOptionButton(string value, string field, string tradeId, HashSet<string> selected)
        {
            string text = (selected.Contains(value) ? "‚úÖ " : "") + value;
            string callbackData = $"set_{field}_{UIManager.SanitizeCallbackData(value)}_trade_{tradeId}";
            return InlineKeyboardButton.WithCallbackData(text, callbackData);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        /// </summary>
        public InlineKeyboardMarkup GetMainMenu(UserSettings settings)
        {
            var buttons = new List<InlineKeyboardButton[]>
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", "start_trade"),
                    InlineKeyboardButton.WithCallbackData("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", "history"),
                    InlineKeyboardButton.WithCallbackData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")
                },
                new[] { InlineKeyboardButton.WithCallbackData("üÜò –ü–æ–º–æ—â—å", "help") }
            };
            return new InlineKeyboardMarkup(buttons);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        /// </summary>
        public InlineKeyboardMarkup GetSettingsMenu(UserSettings settings)
        {
            var rows = new List<InlineKeyboardButton[]>
            {
                new[] { InlineKeyboardButton.WithCallbackData("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "settings_language") },
                new[] { InlineKeyboardButton.WithCallbackData(
                    settings.NotificationsEnabled ? "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ" : "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚ùå", 
                    "settings_notifications") },
                new[] { InlineKeyboardButton.WithCallbackData("üìà –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã", "settings_tickers") },
                new[] { InlineKeyboardButton.WithCallbackData("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Notion", "settings_notion") },
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main") }
            };

            return new InlineKeyboardMarkup(rows);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ Notion
        /// </summary>
        public InlineKeyboardMarkup GetNotionSettingsMenu(UserSettings settings)
        {
            var rows = new List<InlineKeyboardButton[]>();
            
            if (settings.NotionEnabled)
            {
                // –ï—Å–ª–∏ Notion –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData("üîë –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", "notion_token_input") });
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData("üóÑÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Database ID", "notion_database_input") });
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData("üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "notion_test_connection") });
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData("üîå –û—Ç–∫–ª—é—á–∏—Ç—å Notion", "notion_disconnect") });
            }
            else
            {
                // –ï—Å–ª–∏ Notion –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Notion", "notion_connect") });
            }
            
            rows.Add(new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "settings") });
            
            return new InlineKeyboardMarkup(rows);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ Notion
        /// </summary>
        public InlineKeyboardMarkup GetNotionTokenInputMenu()
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "settings_notion") }
            });
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ Database ID Notion
        /// </summary>
        public InlineKeyboardMarkup GetNotionDatabaseInputMenu()
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "settings_notion") }
            });
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        /// </summary>
        public InlineKeyboardMarkup GetLanguageSelectionMenu()
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[] { 
                    InlineKeyboardButton.WithCallbackData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "language_ru"),
                    InlineKeyboardButton.WithCallbackData("üá∫üá∏ English", "language_en")
                },
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "settings") }
            });
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        /// </summary>
        public InlineKeyboardMarkup GetNotificationsMenu(UserSettings settings)
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[] { 
                    InlineKeyboardButton.WithCallbackData("üîî –í–∫–ª—é—á–∏—Ç—å", "notifications_on"),
                    InlineKeyboardButton.WithCallbackData("üîï –í—ã–∫–ª—é—á–∏—Ç—å", "notifications_off")
                },
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "settings") }
            });
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏
        /// </summary>
        public InlineKeyboardMarkup GetFavoriteTickersMenu(List<string> favoriteTickers, List<string> popularTickers)
        {
            var rows = new List<InlineKeyboardButton[]>();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
            if (favoriteTickers.Any())
            {
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:", "noop") });
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –≤ —Ä—è–¥
                for (int i = 0; i < favoriteTickers.Count; i += 3)
                {
                    var row = new List<InlineKeyboardButton>();
                    for (int j = 0; j < 3 && i + j < favoriteTickers.Count; j++)
                    {
                        var ticker = favoriteTickers[i + j];
                        row.Add(InlineKeyboardButton.WithCallbackData($"‚ùå {ticker}", $"remove_ticker_{ticker}"));
                    }
                    rows.Add(row.ToArray());
                }
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if (popularTickers.Any())
            {
                rows.Add(new[] { InlineKeyboardButton.WithCallbackData("üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:", "noop") });
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –≤ —Ä—è–¥
                for (int i = 0; i < popularTickers.Count; i += 3)
                {
                    var row = new List<InlineKeyboardButton>();
                    for (int j = 0; j < 3 && i + j < popularTickers.Count; j++)
                    {
                        var ticker = popularTickers[i + j];
                        if (!favoriteTickers.Contains(ticker, StringComparer.OrdinalIgnoreCase))
                        {
                            row.Add(InlineKeyboardButton.WithCallbackData($"‚ûï {ticker}", $"add_ticker_{ticker}"));
                        }
                    }
                    if (row.Any())
                        rows.Add(row.ToArray());
                }
            }

            rows.Add(new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "settings") });
            
            return new InlineKeyboardMarkup(rows);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        /// </summary>
        public InlineKeyboardMarkup GetConfirmationMenu(string action, string callbackData)
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[] { 
                    InlineKeyboardButton.WithCallbackData("‚úÖ –î–∞", callbackData),
                    InlineKeyboardButton.WithCallbackData("‚ùå –ù–µ—Ç", "settings")
                }
            });
        }
    }
}
