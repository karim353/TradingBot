using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Text.Json;
using TradingBot.Models;

namespace TradingBot.Services
{
    public class NotificationSettings
    {
        public bool EnableTradeNotifications { get; set; } = true;
        public bool EnableErrorNotifications { get; set; } = true;
        public bool EnablePerformanceNotifications { get; set; } = true;
        public bool EnableWeeklyReports { get; set; } = true;
        public TimeSpan OptimalNotificationTime { get; set; } = TimeSpan.FromHours(9); // 9:00 —É—Ç—Ä–∞
        public int MaxNotificationsPerHour { get; set; } = 10;
    }

    public interface INotificationService
    {
        Task SendTradeNotificationAsync(Trade trade, string message, NotificationType type);
        Task SendErrorNotificationAsync(string error, string context, long userId);
        Task SendPerformanceNotificationAsync(string metric, double value, string threshold);
        Task SendWeeklyReportAsync(long userId, WeeklyReport report);
        Task<bool> RequestNotificationPermissionAsync(long userId);
        Task UpdateNotificationPreferencesAsync(long userId, NotificationSettings settings);
    }

    public enum NotificationType
    {
        TradeCreated,
        TradeUpdated,
        TradeClosed,
        ProfitTarget,
        StopLoss,
        WeeklySummary,
        Error,
        Performance
    }

    public class NotificationService : INotificationService
    {
        private readonly ILogger<NotificationService> _logger;
        private readonly NotificationSettings _settings;
        private readonly Dictionary<long, DateTime> _lastNotificationTime = new();
        private readonly Dictionary<long, int> _notificationsThisHour = new();

        public NotificationService(ILogger<NotificationService> logger, IOptions<NotificationSettings> settings)
        {
            _logger = logger;
            _settings = settings.Value;
        }

        public async Task SendTradeNotificationAsync(Trade trade, string message, NotificationType type)
        {
            try
            {
                if (!_settings.EnableTradeNotifications)
                    return;

                if (!await CanSendNotificationAsync(trade.UserId))
                    return;

                var notification = CreateTradeNotification(trade, message, type);
                await SendTelegramNotificationAsync(trade.UserId, notification);
                
                UpdateNotificationCounters(trade.UserId);
                _logger.LogInformation("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId}: {Message}", trade.UserId, message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId}", trade.UserId);
            }
        }

        public async Task SendErrorNotificationAsync(string error, string context, long userId)
        {
            try
            {
                if (!_settings.EnableErrorNotifications)
                    return;

                var notification = $"üö® –û—à–∏–±–∫–∞ –≤ {context}\n\n{error}\n\n‚è∞ {DateTime.Now:HH:mm:ss}";
                await SendTelegramNotificationAsync(userId, notification);
                
                _logger.LogWarning("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId}: {Error}", userId, error);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId}", userId);
            }
        }

        public async Task SendPerformanceNotificationAsync(string metric, double value, string threshold)
        {
            try
            {
                if (!_settings.EnablePerformanceNotifications)
                    return;

                var notification = $"‚ö° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n" +
                                $"–ú–µ—Ç—Ä–∏–∫–∞: {metric}\n" +
                                $"–ó–Ω–∞—á–µ–Ω–∏–µ: {value:F2}\n" +
                                $"–ü–æ—Ä–æ–≥: {threshold}\n" +
                                $"‚è∞ {DateTime.Now:HH:mm:ss}";

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                var adminUserIds = GetAdminUserIds();
                foreach (var adminId in adminUserIds)
                {
                    await SendTelegramNotificationAsync(adminId, notification);
                }

                _logger.LogInformation("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {Metric} = {Value}", metric, value);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
            }
        }

        public async Task SendWeeklyReportAsync(long userId, WeeklyReport report)
        {
            try
            {
                if (!_settings.EnableWeeklyReports)
                    return;

                var notification = CreateWeeklyReportNotification(report);
                await SendTelegramNotificationAsync(userId, notification);
                
                _logger.LogInformation("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId}", userId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId}", userId);
            }
        }

        public async Task<bool> RequestNotificationPermissionAsync(long userId)
        {
            try
            {
                var message = "üîî –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö?\n\n" +
                             "‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏\n" +
                             "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n" +
                             "‚ö° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n" +
                             "–ù–∞–∂–º–∏—Ç–µ /notifications_on –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è";

                await SendTelegramNotificationAsync(userId, message);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", userId);
                return false;
            }
        }

        public async Task UpdateNotificationPreferencesAsync(long userId, NotificationSettings settings)
        {
            try
            {
                var message = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n\n" +
                             $"üîî –¢–æ—Ä–≥–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏: {(settings.EnableTradeNotifications ? "‚úÖ" : "‚ùå")}\n" +
                             $"üö® –û—à–∏–±–∫–∏: {(settings.EnableErrorNotifications ? "‚úÖ" : "‚ùå")}\n" +
                             $"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(settings.EnablePerformanceNotifications ? "‚úÖ" : "‚ùå")}\n" +
                             $"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: {(settings.EnableWeeklyReports ? "‚úÖ" : "‚ùå")}\n\n" +
                             $"‚è∞ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {settings.OptimalNotificationTime:HH:mm}";

                await SendTelegramNotificationAsync(userId, message);
                
                _logger.LogInformation("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", userId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", userId);
            }
        }

        private string CreateTradeNotification(Trade trade, string message, NotificationType type)
        {
            var emoji = type switch
            {
                NotificationType.TradeCreated => "üÜï",
                NotificationType.TradeUpdated => "‚úèÔ∏è",
                NotificationType.TradeClosed => "üîí",
                NotificationType.ProfitTarget => "üéØ",
                NotificationType.StopLoss => "üõë",
                _ => "üìä"
            };

            return $"{emoji} {message}\n\n" +
                   $"–¢–∏–∫–µ—Ä: {trade.Ticker}\n" +
                   $"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {trade.Direction}\n" +
                   $"PnL: {trade.PnL:C}\n" +
                   $"–†–∏—Å–∫: {trade.Risk}%\n" +
                   $"–î–∞—Ç–∞: {trade.Date:dd.MM.yyyy HH:mm}\n\n" +
                   $"‚è∞ {DateTime.Now:HH:mm:ss}";
        }

        private string CreateWeeklyReportNotification(WeeklyReport report)
        {
            return $"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç {report.WeekStart:dd.MM.yyyy} - {report.WeekEnd:dd.MM.yyyy}\n\n" +
                   $"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {report.TotalTrades}\n" +
                   $"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {report.ProfitableTrades}\n" +
                   $"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {report.LossMakingTrades}\n" +
                   $"üí∞ –û–±—â–∏–π PnL: {report.TotalPnL:C}\n" +
                   $"üìä –í–∏–Ω—Ä–µ–π—Ç: {report.WinRate:P1}\n" +
                   $"‚ö° –°—Ä–µ–¥–Ω–∏–π PnL: {report.AveragePnL:C}\n\n" +
                   $"üîù –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: {report.BestTrade?.Ticker} ({report.BestTrade?.PnL:C})\n" +
                   $"üìâ –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: {report.WorstTrade?.Ticker} ({report.WorstTrade?.PnL:C})\n\n" +
                   $"‚è∞ {DateTime.Now:HH:mm:ss}";
        }

        private async Task SendTelegramNotificationAsync(long userId, string message)
        {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            _logger.LogInformation("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {UserId}: {Message}", userId, message);
            await Task.Delay(100); // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        }

        private async Task<bool> CanSendNotificationAsync(long userId)
        {
            var now = DateTime.Now;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Å
            if (_notificationsThisHour.TryGetValue(userId, out var count) && count >= _settings.MaxNotificationsPerHour)
            {
                _logger.LogDebug("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", userId);
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏)
            if (_lastNotificationTime.TryGetValue(userId, out var lastTime))
            {
                if (now - lastTime < TimeSpan.FromMinutes(1))
                {
                    _logger.LogDebug("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", userId);
                    return false;
                }
            }

            return true;
        }

        private void UpdateNotificationCounters(long userId)
        {
            var now = DateTime.Now;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            _lastNotificationTime[userId] = now;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Å
            if (!_notificationsThisHour.ContainsKey(userId))
                _notificationsThisHour[userId] = 0;
            
            _notificationsThisHour[userId]++;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
            if (now.Minute == 0)
            {
                _notificationsThisHour[userId] = 1;
            }
        }

        private List<long> GetAdminUserIds()
        {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ë–î
            return new List<long> { 123456789 }; // –ü—Ä–∏–º–µ—Ä
        }
    }

    public class WeeklyReport
    {
        public DateTime WeekStart { get; set; }
        public DateTime WeekEnd { get; set; }
        public int TotalTrades { get; set; }
        public int ProfitableTrades { get; set; }
        public int LossMakingTrades { get; set; }
        public decimal TotalPnL { get; set; }
        public double WinRate { get; set; }
        public decimal AveragePnL { get; set; }
        public Trade? BestTrade { get; set; }
        public Trade? WorstTrade { get; set; }
    }
}
