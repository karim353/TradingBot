using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Caching.Memory;
using TradingBot.Models;

namespace TradingBot.Services
{
    /// <summary>
    /// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Notion –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    /// </summary>
    public class PersonalNotionTradeStorage : ITradeStorage
    {
        private readonly TradeRepository _repo;
        private readonly PersonalNotionService _personalNotionService;
        private readonly IMemoryCache _cache;
        private readonly ILogger<PersonalNotionTradeStorage> _logger;

        public PersonalNotionTradeStorage(
            TradeRepository repo,
            PersonalNotionService personalNotionService,
            IMemoryCache cache,
            ILogger<PersonalNotionTradeStorage> logger)
        {
            _repo = repo;
            _personalNotionService = personalNotionService;
            _cache = cache;
            _logger = logger;
        }

        public async Task AddTradeAsync(Trade trade)
        {
            try
            {
                // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                await _repo.AddTradeAsync(trade);
                
                // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –±–∞–∑—É Notion (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
                if (trade.UserId > 0)
                {
                    // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ GetUserSettingsAsync –≤ TradeRepository
                    // var userSettings = await _repo.GetUserSettingsAsync(trade.UserId);
                    // if (userSettings?.NotionEnabled == true && !string.IsNullOrEmpty(userSettings.NotionDatabaseId))
                    // {
                    //     try
                    //     {
                    //         // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±–∞–∑–µ Notion
                    //         // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    //         _logger.LogInformation("–°–¥–µ–ª–∫–∞ {TradeId} –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π Notion –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", 
                    //             trade.Id, trade.UserId);
                    //     }
                    //     catch (Exception ex)
                    //     {
                    //         _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫—É {TradeId} —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π Notion", trade.Id);
                    //     }
                    // }
                    
                    _logger.LogInformation("–°–¥–µ–ª–∫–∞ {TradeId} –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π Notion –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", 
                        trade.Id, trade.UserId);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ {TradeId}", trade.Id);
                throw;
            }
        }

        public async Task UpdateTradeAsync(Trade trade)
        {
            try
            {
                await _repo.UpdateTradeAsync(trade);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±–∞–∑–µ Notion (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
                if (trade.UserId > 0)
                {
                    // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ GetUserSettingsAsync –≤ TradeRepository
                    _logger.LogInformation("–°–¥–µ–ª–∫–∞ {TradeId} –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±–∞–∑–µ Notion", trade.Id);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ {TradeId}", trade.Id);
                throw;
            }
        }

        public async Task DeleteTradeAsync(Trade trade)
        {
            try
            {
                await _repo.DeleteTradeAsync(trade);
                
                // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã Notion (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
                if (trade.UserId > 0)
                {
                    // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ GetUserSettingsAsync –≤ TradeRepository
                    _logger.LogInformation("–°–¥–µ–ª–∫–∞ {TradeId} –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã Notion", trade.Id);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ {TradeId}", trade.Id);
                throw;
            }
        }

        public async Task<Trade?> GetLastTradeAsync(long userId)
        {
            return await _repo.GetLastTradeAsync(userId);
        }

        public async Task<List<Trade>> GetTradesAsync(long userId)
        {
            return await _repo.GetTradesAsync(userId);
        }

        public async Task<List<Trade>> GetTradesInDateRangeAsync(long userId, DateTime from, DateTime to)
        {
            return await _repo.GetTradesInDateRangeAsync(userId, from, to);
        }

        public async Task<List<string>> GetSelectOptionsAsync(string propertyName, Trade? current = null)
        {
            try
            {
                if (current?.UserId == 0)
                {
                    return new List<string>();
                }

                // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ GetUserSettingsAsync –≤ TradeRepository
                // var userSettings = await _repo.GetUserSettingsAsync(current.UserId);
                // if (userSettings?.NotionEnabled == true && !string.IsNullOrEmpty(userSettings.NotionDatabaseId))
                // {
                //     // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã Notion
                //     var personalOptions = await _personalNotionService.GetPersonalOptionsAsync(userSettings, propertyName);
                //     if (personalOptions.Any())
                //     {
                //         _logger.LogDebug("–ü–æ–ª—É—á–µ–Ω–æ {Count} –æ–ø—Ü–∏–π –¥–ª—è –ø–æ–ª—è {Field} –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã Notion", 
                //             personalOptions.Count, propertyName);
                //         return personalOptions;
                //     }
                // }

                // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
                return await GetLocalOptionsAsync(propertyName);
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—Ü–∏–π –¥–ª—è –ø–æ–ª—è {Field}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ", propertyName);
                return await GetLocalOptionsAsync(propertyName);
            }
        }

        public async Task<List<string>> GetSuggestedOptionsAsync(string propertyName, long userId, Trade? current = null, int topN = 12)
        {
            try
            {
                var suggestions = new List<string>();
                
                // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ GetUserSettingsAsync –≤ TradeRepository
                // var userSettings = await _repo.GetUserSettingsAsync(userId);
                // if (userSettings?.NotionEnabled == true && !string.IsNullOrEmpty(userSettings.NotionDatabaseId))
                // {
                //     var personalOptions = await _personalNotionService.GetPersonalOptionsAsync(userSettings, propertyName);
                //     suggestions.AddRange(personalOptions.Take(topN / 2));
                // }
                
                // –î–æ–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
                var localOptions = await GetLocalOptionsAsync(propertyName);
                var remainingCount = topN - suggestions.Count;
                if (remainingCount > 0)
                {
                    suggestions.AddRange(localOptions.Take(remainingCount));
                }
                
                return suggestions.Distinct().Take(topN).ToList();
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—è {Field}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ", propertyName);
                return await GetLocalOptionsAsync(propertyName);
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è (fallback)
        /// </summary>
        private Task<List<string>> GetLocalOptionsAsync(string propertyName)
        {
            // –ö–µ—à–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            var cacheKey = $"local_options_{propertyName}";
            if (_cache.TryGetValue(cacheKey, out List<string>? cachedOptions) && cachedOptions != null)
            {
                return Task.FromResult(cachedOptions);
            }

            var options = propertyName.ToLowerInvariant() switch
            {
                "account" => new List<string> { "üè¶ BingX", "üè¶ Binance", "üè¶ MEXC", "üè¶ Bybit", "üß™ Demo" },
                "session" => new List<string> { "ASIA", "LONDON", "NEW YORK", "FRANKFURT" },
                "position" => new List<string> { "‚ö° Scalp", "‚è± Intraday", "üìÖ Swing", "üèãÔ∏è Position" },
                "direction" => new List<string> { "Long", "Short" },
                "context" => new List<string> { "üìà Uptrend", "üìâ Downtrend", "‚ûñ Range" },
                "setup" => new List<string> { "‚ÜóÔ∏è Continuation (CONT)", "üìà Breakout", "üîÑ Reversal (REVR)", "üîÅ Double Top/Bottom", "üë§ Head & Shoulders" },
                "result" => new List<string> { "TP", "SL", "BE" },
                "emotions" => new List<string> { "üòå Calm", "üéØ Focused", "üò® Fear", "üòµ‚Äçüí´ FOMO" },
                _ => new List<string>()
            };

            // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å
            _cache.Set(cacheKey, options, TimeSpan.FromHours(1));
            return Task.FromResult(options);
        }
    }
}
