using TradingBot.Services.Interfaces;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace TradingBot.Services;

/// <summary>
/// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è TradingBot
/// </summary>
public class AdvancedMetricsCollector : BackgroundService
{
    private readonly IMetricsService _metricsService;
    private readonly ILogger<AdvancedMetricsCollector> _logger;
    private readonly Process _currentProcess;
    private readonly DateTime _startTime;
    private readonly Timer _systemMetricsTimer;
    private readonly Timer _tradingMetricsTimer;
    private readonly Timer _performanceMetricsTimer;

    public AdvancedMetricsCollector(
        IMetricsService metricsService,
        ILogger<AdvancedMetricsCollector> logger)
    {
        _metricsService = metricsService;
        _logger = logger;
        _currentProcess = Process.GetCurrentProcess();
        _startTime = DateTime.UtcNow;
        
        // –¢–∞–π–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ—Ç—Ä–∏–∫
        _systemMetricsTimer = new Timer(CollectSystemMetrics, null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
        _tradingMetricsTimer = new Timer(CollectTradingMetrics, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
        _performanceMetricsTimer = new Timer(CollectPerformanceMetrics, null, TimeSpan.Zero, TimeSpan.FromSeconds(15));
    }

    protected override Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _logger.LogInformation("üöÄ AdvancedMetricsCollector –∑–∞–ø—É—â–µ–Ω");
        return Task.CompletedTask;
    }

    public override Task StopAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("üõë AdvancedMetricsCollector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        return base.StopAsync(cancellationToken);
    }

    public override void Dispose()
    {
        _systemMetricsTimer?.Dispose();
        _tradingMetricsTimer?.Dispose();
        _performanceMetricsTimer?.Dispose();
        base.Dispose();
    }

    /// <summary>
    /// –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    /// </summary>
    private void CollectSystemMetrics(object? state)
    {
        try
        {
            var uptime = DateTime.UtcNow - _startTime;
            _metricsService.RecordSystemUptime(uptime);

            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            var memoryUsage = _currentProcess.WorkingSet64;
            _metricsService.RecordMemoryUsage(memoryUsage);

            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
            var cpuUsage = GetCpuUsage();
            _metricsService.RecordCpuUsage(cpuUsage);

            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
            CollectDiskUsage();

            // –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            CollectNetworkConnections();

            // –ó–¥–æ—Ä–æ–≤—å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            UpdateComponentHealth();

            _logger.LogDebug("üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã: Uptime={Uptime}, Memory={Memory}MB, CPU={Cpu}%", 
                uptime.TotalHours.ToString("F1"), memoryUsage / 1024 / 1024, cpuUsage);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫");
        }
    }

    /// <summary>
    /// –°–±–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
    /// </summary>
    private void CollectTradingMetrics(object? state)
    {
        try
        {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫, —Ä–∞—Å—á–µ—Ç Win Rate –∏ —Ç.–¥.
            
            // –ü—Ä–∏–º–µ—Ä: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            _metricsService.RecordLastUpdateTime(DateTime.UtcNow);
            
            _logger.LogDebug("üìà –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫");
        }
    }

    /// <summary>
    /// –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    /// </summary>
    private void CollectPerformanceMetrics(object? state)
    {
        try
        {
            // –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞
            var gcTime = GetGarbageCollectionTime();
            _metricsService.RecordGarbageCollectionTime(gcTime);

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—Ä–∏–º–µ—Ä)
            var concurrentRequests = GetConcurrentRequests();
            _metricsService.RecordConcurrentRequests(concurrentRequests);

            // –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–º–µ—Ä)
            var dbSize = GetDatabaseSize();
            _metricsService.RecordDatabaseSize(dbSize);

            // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø—Ä–∏–º–µ—Ä)
            var activeUsers = GetActiveUsers();
            _metricsService.RecordActiveUsers(activeUsers);

            _logger.LogDebug("‚ö° –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–Ω—ã: GC={GcTime}ms, Requests={Requests}, DB={DbSize}MB, Users={Users}", 
                gcTime.TotalMilliseconds, concurrentRequests, dbSize, activeUsers);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
    /// </summary>
    private double GetCpuUsage()
    {
        try
        {
            var startTime = _currentProcess.StartTime;
            var startCpuUsage = _currentProcess.TotalProcessorTime;
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
            Thread.Sleep(100);
            
            var endTime = DateTime.Now;
            var endCpuUsage = _currentProcess.TotalProcessorTime;
            
            var cpuUsedMs = (endCpuUsage - startCpuUsage).TotalMilliseconds;
            var totalMsPassed = (endTime - startTime).TotalMilliseconds;
            
            return Math.Min(100.0, (cpuUsedMs / totalMsPassed) * 100);
        }
        catch
        {
            return 0.0;
        }
    }

    /// <summary>
    /// –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∏—Å–∫–∞
    /// </summary>
    private void CollectDiskUsage()
    {
        try
        {
            var driveInfo = new DriveInfo(Path.GetPathRoot(Environment.CurrentDirectory) ?? "/");
            var bytesUsed = driveInfo.TotalSize - driveInfo.AvailableFreeSpace;
            var bytesTotal = driveInfo.TotalSize;
            
            _metricsService.RecordDiskUsage(driveInfo.Name, bytesUsed, bytesTotal);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–∏—Å–∫–∞");
        }
    }

    /// <summary>
    /// –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
    /// </summary>
    private void CollectNetworkConnections()
    {
        try
        {
            // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            var activeConnections = _currentProcess.Threads.Count;
            _metricsService.RecordNetworkConnections(activeConnections);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ç–∏");
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    /// </summary>
    private void UpdateComponentHealth()
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            var components = new Dictionary<string, bool>
            {
                { "database", CheckDatabaseHealth() },
                { "redis", CheckRedisHealth() },
                { "telegram_api", CheckTelegramApiHealth() },
                { "notion_api", CheckNotionApiHealth() },
                { "metrics_service", true }, // –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
                { "health_check", true }
            };

            foreach (var component in components)
            {
                _metricsService.RecordComponentHealth(component.Key, component.Value);
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞
    /// </summary>
    private TimeSpan GetGarbageCollectionTime()
    {
        try
        {
            var totalGcTime = GC.GetTotalMemory(false);
            return TimeSpan.FromMilliseconds(totalGcTime / 1024); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        }
        catch
        {
            return TimeSpan.Zero;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    /// </summary>
    private int GetConcurrentRequests()
    {
        try
        {
            // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤
            return _currentProcess.Threads.Count;
        }
        catch
        {
            return 0;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    /// </summary>
    private double GetDatabaseSize()
    {
        try
        {
            var dbPath = Path.Combine(Environment.CurrentDirectory, "trades.db");
            if (File.Exists(dbPath))
            {
                var fileInfo = new FileInfo(dbPath);
                return fileInfo.Length / 1024.0 / 1024.0; // –í –ú–ë
            }
            return 0.0;
        }
        catch
        {
            return 0.0;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    /// </summary>
    private int GetActiveUsers()
    {
        try
        {
            // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
            var uptime = DateTime.UtcNow - _startTime;
            return Math.Min(100, (int)(uptime.TotalMinutes / 10)); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        }
        catch
        {
            return 0;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    /// </summary>
    private bool CheckDatabaseHealth()
    {
        try
        {
            var dbPath = Path.Combine(Environment.CurrentDirectory, "trades.db");
            return File.Exists(dbPath);
        }
        catch
        {
            return false;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis
    /// </summary>
    private bool CheckRedisHealth()
    {
        try
        {
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, Redis —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            return true;
        }
        catch
        {
            return false;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Telegram API
    /// </summary>
    private bool CheckTelegramApiHealth()
    {
        try
        {
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, API —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            return true;
        }
        catch
        {
            return false;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Notion API
    /// </summary>
    private bool CheckNotionApiHealth()
    {
        try
        {
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, API —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            return true;
        }
        catch
        {
            return false;
        }
    }
}
