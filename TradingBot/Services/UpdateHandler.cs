using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using TradingBot.Models;
using TradingBot.Services;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Microsoft.Extensions.Logging;
using ScottPlot;

namespace TradingBot.Services
{
    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–º–∞–Ω–¥, callback) –∏–∑ Telegram.
    /// </summary>
    public class UpdateHandler
    {
        private readonly TradeRepository _repo;
        private readonly PnLService _pnlService;
        private readonly NotionService _notionService;
        private readonly ILogger<UpdateHandler> _logger;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /log (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º):
        private class LogState
        {
            public Trade Trade { get; set; }
            public int Step { get; set; }
        }
        private readonly Dictionary<long, LogState> _logStates = new Dictionary<long, LogState>();

        public UpdateHandler(TradeRepository repo, PnLService pnlService, NotionService notionService, ILogger<UpdateHandler> logger)
        {
            _repo = repo;
            _pnlService = pnlService;
            _notionService = notionService;
            _logger = logger;
        }

        /// <summary>
        /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram.
        /// </summary>
        public async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
        {
            try
            {
                if (update.Type == UpdateType.Message && update.Message != null)
                {
                    var message = update.Message;
                    long chatId = message.Chat.Id;

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã)
                    if (message.Type == MessageType.Text)
                    {
                        string text = message.Text?.Trim() ?? string.Empty;

                        // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/')
                        if (text.StartsWith("/"))
                        {
                            // –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ (–Ω–µ /log –∏ –Ω–µ /cancel) ‚Äì —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞
                            if (_logStates.ContainsKey(chatId) && text != "/cancel" && !text.StartsWith("/log"))
                            {
                                _logStates.Remove(chatId);
                            }

                            if (text.Equals("/start", StringComparison.OrdinalIgnoreCase))
                            {
                                string welcome = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç PnL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /log –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞.";
                                await bot.SendMessage(chatId, welcome, cancellationToken: cancellationToken);
                                return;
                            }

                            if (text.Equals("/menu", StringComparison.OrdinalIgnoreCase))
                            {
                                var keyboard = new InlineKeyboardMarkup(new[]
                                {
                                    new []
                                    {
                                        InlineKeyboardButton.WithCallbackData("üìä Stats", "stats"),
                                        InlineKeyboardButton.WithCallbackData("üìà Advanced Stats", "advstats")
                                    },
                                    new []
                                    {
                                        InlineKeyboardButton.WithCallbackData("üóì Summary Week", "summary_week"),
                                        InlineKeyboardButton.WithCallbackData("üìÖ Summary Month", "summary_month")
                                    },
                                    new []
                                    {
                                        InlineKeyboardButton.WithCallbackData("‚ùå Delete Last Trade", "delete_last")
                                    }
                                });
                                await bot.SendMessage(chatId, "–ú–µ–Ω—é:", replyMarkup: keyboard, cancellationToken: cancellationToken);
                                return;
                            }

                            if (text.Equals("/log", StringComparison.OrdinalIgnoreCase))
                            {
                                var newTrade = new Trade
                                {
                                    ChatId = chatId,
                                    Date = DateTime.Now
                                };
                                _logStates[chatId] = new LogState { Trade = newTrade, Step = 1 };
                                await bot.SendMessage(chatId, "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏. –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä:", cancellationToken: cancellationToken);
                                return;
                            }

                            if (text.Equals("/cancel", StringComparison.OrdinalIgnoreCase))
                            {
                                if (_logStates.ContainsKey(chatId))
                                {
                                    _logStates.Remove(chatId);
                                    await bot.SendMessage(chatId, "–í–≤–æ–¥ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.", cancellationToken: cancellationToken);
                                }
                                else
                                {
                                    await bot.SendMessage(chatId, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å–¥–µ–ª–∫–∏.", cancellationToken: cancellationToken);
                                }
                                return;
                            }

                            if (text.Equals("/stats", StringComparison.OrdinalIgnoreCase))
                            {
                                var trades = await _repo.GetTradesAsync(chatId);
                                int totalTrades = trades.Count;
                                int wins = trades.Count(t => t.PnL > 0);
                                int losses = trades.Count(t => t.PnL < 0);
                                decimal totalPnl = trades.Sum(t => t.PnL);
                                string stats = $"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {totalTrades}\n" +
                                               $"–û–±—â–∏–π PnL: {totalPnl}\n" +
                                               $"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {wins}, –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losses}\n" +
                                               $"Win Rate: {(totalTrades > 0 ? (wins * 100 / totalTrades) : 0)}%";
                                await bot.SendMessage(chatId, stats, cancellationToken: cancellationToken);
                                return;
                            }

                            if (text.Equals("/advstats", StringComparison.OrdinalIgnoreCase))
                            {
                                var trades = await _repo.GetTradesAsync(chatId);
                                if (trades.Count == 0)
                                {
                                    await bot.SendMessage(chatId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–¥–µ–ª–∫–∞–º.", cancellationToken: cancellationToken);
                                    return;
                                }

                                decimal total = trades.Sum(t => t.PnL);
                                decimal best = trades.Max(t => t.PnL);
                                decimal worst = trades.Min(t => t.PnL);
                                decimal average = trades.Count > 0 ? total / trades.Count : 0;
                                int wins = trades.Count(t => t.PnL > 0);
                                string advStats = $"–°–¥–µ–ª–æ–∫: {trades.Count}\n" +
                                                  $"–û–±—â–∏–π PnL: {total}\n" +
                                                  $"–°—Ä–µ–¥–Ω–∏–π PnL: {Math.Round(average, 2)}\n" +
                                                  $"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best}\n" +
                                                  $"–•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {worst}\n" +
                                                  $"Win Rate: {(trades.Count > 0 ? (wins * 100 / trades.Count) : 0)}%";

                                trades.Sort((a, b) => a.Date.CompareTo(b.Date));
                                double cumulative = 0;
                                double[] xs = new double[trades.Count];
                                double[] ys = new double[trades.Count];
                                for (int i = 0; i < trades.Count; i++)
                                {
                                    cumulative += (double)trades[i].PnL;
                                    xs[i] = trades[i].Date.ToOADate();
                                    ys[i] = cumulative;
                                }

                                var plt = new ScottPlot.Plot();
                                var scatter = plt.Add.Scatter(xs, ys);
                                scatter.MarkerSize = 0; // –°–∫—Ä—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã
                                plt.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.DateTimeAutomatic();
                                plt.XLabel("Date");
                                plt.YLabel("Cumulative PnL");
                                plt.Title("Equity Curve");

                                var image = plt.GetImage(600, 400);
                                var bytes = image.GetImageBytes(ScottPlot.ImageFormat.Png);
                                using var ms = new MemoryStream(bytes);
                                await bot.SendMessage(chatId, advStats, cancellationToken: cancellationToken);
                                await bot.SendPhoto(chatId, new InputFileStream(ms, "equity.png"), caption: "Equity curve", cancellationToken: cancellationToken);
                                return;
                            }

                            if (text.StartsWith("/summary", StringComparison.OrdinalIgnoreCase))
                            {
                                string[] parts = text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                                string period = parts.Length > 1 ? parts[1].ToLower() : string.Empty;
                                DateTime from;
                                DateTime to = DateTime.Now;
                                if (period == "week")
                                {
                                    from = DateTime.Now.AddDays(-7);
                                }
                                else if (period == "month")
                                {
                                    from = DateTime.Now.AddDays(-30);
                                }
                                else
                                {
                                    await bot.SendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: /summary week | month", cancellationToken: cancellationToken);
                                    return;
                                }
                                var trades = await _repo.GetTradesInDateRangeAsync(chatId, from, to);
                                if (trades.Count == 0)
                                {
                                    await bot.SendMessage(chatId, "–°–¥–µ–ª–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç.", cancellationToken: cancellationToken);
                                }
                                else
                                {
                                    decimal total = trades.Sum(t => t.PnL);
                                    string summary = $"–ü–µ—Ä–∏–æ–¥: {period}\n" +
                                                     $"–°–¥–µ–ª–æ–∫: {trades.Count}\n" +
                                                     $"–°—É–º–º–∞—Ä–Ω—ã–π PnL: {total}";
                                    await bot.SendMessage(chatId, summary, cancellationToken: cancellationToken);
                                }
                                return;
                            }

                            if (text.StartsWith("/pnl", StringComparison.OrdinalIgnoreCase))
                            {
                                string[] parts = text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                                if (parts.Length < 3)
                                {
                                    await bot.SendMessage(chatId, "–§–æ—Ä–º–∞—Ç: /pnl YYYY-MM-DD YYYY-MM-DD", cancellationToken: cancellationToken);
                                    return;
                                }
                                if (!DateTime.TryParse(parts[1], out DateTime fromDate) || !DateTime.TryParse(parts[2], out DateTime toDate))
                                {
                                    await bot.SendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ü—Ä–∏–º–µ—Ä: /pnl 2025-01-01 2025-01-31", cancellationToken: cancellationToken);
                                    return;
                                }
                                if (fromDate > toDate)
                                {
                                    (fromDate, toDate) = (toDate, fromDate);
                                }
                                var trades = await _repo.GetTradesInDateRangeAsync(chatId, fromDate, toDate);
                                if (trades.Count == 0)
                                {
                                    await bot.SendMessage(chatId, "–°–¥–µ–ª–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", cancellationToken: cancellationToken);
                                }
                                else
                                {
                                    decimal total = trades.Sum(t => t.PnL);
                                    string result = $"PnL —Å {fromDate:yyyy-MM-dd} –ø–æ {toDate:yyyy-MM-dd}: {total}";
                                    await bot.SendMessage(chatId, result, cancellationToken: cancellationToken);
                                }
                                return;
                            }

                            if (text.Equals("/last", StringComparison.OrdinalIgnoreCase))
                            {
                                var lastTrade = await _repo.GetLastTradeAsync(chatId);
                                if (lastTrade == null)
                                {
                                    await bot.SendMessage(chatId, "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", cancellationToken: cancellationToken);
                                }
                                else
                                {
                                    string tradeInfo =
                                        $"–î–∞—Ç–∞: {lastTrade.Date}\n" +
                                        $"–¢–∏–∫–µ—Ä: {lastTrade.Ticker}\n" +
                                        $"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {lastTrade.Direction}\n" +
                                        $"PnL: {lastTrade.PnL}\n" +
                                        $"Entry: {lastTrade.Entry}\n" +
                                        $"SL: {lastTrade.SL}\n" +
                                        $"TP: {lastTrade.TP}\n" +
                                        $"–û–±—ä—ë–º: {lastTrade.Volume}\n" +
                                        $"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {lastTrade.Comment}";
                                    await bot.SendMessage(chatId, tradeInfo, cancellationToken: cancellationToken);
                                }
                                return;
                            }

                            if (text.Equals("/undo", StringComparison.OrdinalIgnoreCase) ||
                                text.Equals("/deletelast", StringComparison.OrdinalIgnoreCase) ||
                                text.Equals("/delete_last", StringComparison.OrdinalIgnoreCase))
                            {
                                var lastTrade = await _repo.GetLastTradeAsync(chatId);
                                if (lastTrade == null)
                                {
                                    await bot.SendMessage(chatId, "–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ (–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫).", cancellationToken: cancellationToken);
                                }
                                else
                                {
                                    await _repo.DeleteTradeAsync(lastTrade);
                                    await bot.SendMessage(chatId, $"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞ ({lastTrade.Ticker}) —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã.", cancellationToken: cancellationToken);
                                }
                                return;
                            }
                        }

                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å–¥–µ–ª–∫–∏ (/log)
                        if (_logStates.ContainsKey(chatId))
                        {
                            var state = _logStates[chatId];
                            switch (state.Step)
                            {
                                case 1:
                                    state.Trade.Ticker = text;
                                    state.Step++;
                                    await bot.SendMessage(chatId, "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (Long/Short):", cancellationToken: cancellationToken);
                                    break;
                                case 2:
                                    state.Trade.Direction = text;
                                    state.Step++;
                                    await bot.SendMessage(chatId, "PnL (–ø—Ä–∏–±—ã–ª—å –∏–ª–∏ —É–±—ã—Ç–æ–∫):", cancellationToken: cancellationToken);
                                    break;
                                case 3:
                                    state.Trade.PnL = decimal.TryParse(text, out decimal pnl) ? pnl : 0;
                                    state.Step++;
                                    await bot.SendMessage(chatId, "Entry price (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", cancellationToken: cancellationToken);
                                    break;
                                case 4:
                                    state.Trade.Entry = string.IsNullOrEmpty(text) || text == "-" ? null : decimal.TryParse(text, out decimal entryVal) ? entryVal : null;
                                    state.Step++;
                                    await bot.SendMessage(chatId, "Stop Loss (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", cancellationToken: cancellationToken);
                                    break;
                                case 5:
                                    state.Trade.SL = string.IsNullOrEmpty(text) || text == "-" ? null : decimal.TryParse(text, out decimal slVal) ? slVal : null;
                                    state.Step++;
                                    await bot.SendMessage(chatId, "Take Profit (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", cancellationToken: cancellationToken);
                                    break;
                                case 6:
                                    state.Trade.TP = string.IsNullOrEmpty(text) || text == "-" ? null : decimal.TryParse(text, out decimal tpVal) ? tpVal : null;
                                    state.Step++;
                                    await bot.SendMessage(chatId, "–û–±—ä—ë–º (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", cancellationToken: cancellationToken);
                                    break;
                                case 7:
                                    state.Trade.Volume = string.IsNullOrEmpty(text) || text == "-" ? null : decimal.TryParse(text, out decimal volVal) ? volVal : null;
                                    state.Step++;
                                    await bot.SendMessage(chatId, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", cancellationToken: cancellationToken);
                                    break;
                                case 8:
                                    state.Trade.Comment = text;
                                    var completedTrade = state.Trade;
                                    _logStates.Remove(chatId);

                                    await _repo.AddTradeAsync(completedTrade);
                                    try
                                    {
                                        string notionPageId = await _notionService.CreatePageForTradeAsync(completedTrade);
                                        completedTrade.NotionPageId = notionPageId;
                                        await _repo.UpdateTradeAsync(completedTrade);
                                    }
                                    catch (Exception ex)
                                    {
                                        _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É –≤ Notion.");
                                        await bot.SendMessage(chatId, "–°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Notion (–æ—à–∏–±–∫–∞ API).", cancellationToken: cancellationToken);
                                    }
                                    await bot.SendMessage(chatId, $"–°–¥–µ–ª–∫–∞ {completedTrade.Ticker} ({completedTrade.Direction}) PnL={completedTrade.PnL} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", cancellationToken: cancellationToken);
                                    break;
                            }
                            return;
                        }
                    }
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
                    else if (message.Type == MessageType.Photo)
                    {
                        var photos = message.Photo;
                        if (photos?.Length > 0)
                        {
                            var fileId = photos[^1].FileId;
                            try
                            {
                                var fileInfo = await bot.GetFile(fileId, cancellationToken);
                                if (fileInfo.FilePath == null)
                                {
                                    await bot.SendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.", cancellationToken: cancellationToken);
                                    return;
                                }
                                using var stream = new MemoryStream();
                                await bot.DownloadFile(fileInfo.FilePath, stream, cancellationToken);
                                stream.Position = 0;

                                PnLData data = _pnlService.ExtractFromImage(stream);
                                if (string.IsNullOrEmpty(data.Ticker) || string.IsNullOrEmpty(data.Direction))
                                {
                                    await bot.SendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É –≤—Ä—É—á–Ω—É—é.", cancellationToken: cancellationToken);
                                }
                                else
                                {
                                    var trade = new Trade
                                    {
                                        ChatId = chatId,
                                        Date = DateTime.Now,
                                        Ticker = data.Ticker,
                                        Direction = data.Direction,
                                        PnL = data.PnL
                                    };
                                    await _repo.AddTradeAsync(trade);
                                    try
                                    {
                                        string notionPageId = await _notionService.CreatePageForTradeAsync(trade);
                                        trade.NotionPageId = notionPageId;
                                        await _repo.UpdateTradeAsync(trade);
                                    }
                                    catch (Exception ex)
                                    {
                                        _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É –≤ Notion.");
                                        await bot.SendMessage(chatId, "–°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Notion.", cancellationToken: cancellationToken);
                                    }
                                    await bot.SendMessage(chatId, $"–°–¥–µ–ª–∫–∞ {trade.Ticker} ({trade.Direction}) PnL={trade.PnL} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", cancellationToken: cancellationToken);
                                }
                            }
                            catch (Exception ex)
                            {
                                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
                                await bot.SendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", cancellationToken: cancellationToken);
                            }
                        }
                    }
                }
                else if (update.Type == UpdateType.CallbackQuery && update.CallbackQuery != null)
                {
                    var callback = update.CallbackQuery;
                    long chatId = callback.Message.Chat.Id;
                    string data = callback.Data;
                    await bot.AnswerCallbackQuery(callback.Id, cancellationToken: cancellationToken);

                    if (data == "stats")
                    {
                        var trades = await _repo.GetTradesAsync(chatId);
                        int totalTrades = trades.Count;
                        int wins = trades.Count(t => t.PnL > 0);
                        int losses = trades.Count(t => t.PnL < 0);
                        decimal totalPnl = trades.Sum(t => t.PnL);
                        string stats = $"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {totalTrades}\n" +
                                       $"–û–±—â–∏–π PnL: {totalPnl}\n" +
                                       $"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {wins}, –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losses}\n" +
                                       $"Win Rate: {(totalTrades > 0 ? (wins * 100 / totalTrades) : 0)}%";
                        await bot.SendMessage(chatId, stats, cancellationToken: cancellationToken);
                    }
                    else if (data == "advstats") {
                    var trades = await _repo.GetTradesAsync(chatId);
                    if (trades.Count == 0)
                    {
                        await bot.SendMessage(chatId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–¥–µ–ª–∫–∞–º.", cancellationToken: cancellationToken);
                    }
                    else
                    {
                        decimal total = trades.Sum(t => t.PnL);
                        decimal best = trades.Max(t => t.PnL);
                        decimal worst = trades.Min(t => t.PnL);
                        decimal average = trades.Count > 0 ? total / trades.Count : 0;
                        int wins = trades.Count(t => t.PnL > 0);
                        string advStats = $"–°–¥–µ–ª–æ–∫: {trades.Count}\n" +
                                          $"–û–±—â–∏–π PnL: {total}\n" +
                                          $"–°—Ä–µ–¥–Ω–∏–π PnL: {Math.Round(average, 2)}\n" +
                                          $"–õ—É—á—à–∏–π: {best}\n" +
                                          $"–•—É–¥—à–∏–π: {worst}\n" +
                                          $"Win Rate: {(trades.Count > 0 ? (wins * 100 / trades.Count) : 0)}%";

                        trades.Sort((a, b) => a.Date.CompareTo(b.Date));
                        double cumulative = 0;
                        double[] xs = new double[trades.Count];
                        double[] ys = new double[trades.Count];
                        for (int i = 0; i < trades.Count; i++)
                        {
                            cumulative += (double)trades[i].PnL;
                            xs[i] = trades[i].Date.ToOADate();
                            ys[i] = cumulative;
                        }

                        var plt = new ScottPlot.Plot();
                        var scatter = plt.Add.Scatter(xs, ys);
                        scatter.MarkerSize = 0; // –°–∫—Ä—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã
                        plt.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.DateTimeAutomatic();
                        plt.XLabel("Date");
                        plt.YLabel("Cumulative PnL");
                        plt.Title("Equity Curve");

                        var image = plt.GetImage(600, 400);
                        var bytes = image.GetImageBytes(ScottPlot.ImageFormat.Png);
                        using var ms = new MemoryStream(bytes);
                        await bot.SendMessage(chatId, advStats, cancellationToken: cancellationToken);
                        await bot.SendPhoto(chatId, new InputFileStream(ms, "equity.png"), caption: "Equity curve", cancellationToken: cancellationToken);
                    }
                }
                    else if (data == "summary_week" || data == "summary_month")
                    {
                        DateTime from = data == "summary_week" ? DateTime.Now.AddDays(-7) : DateTime.Now.AddDays(-30);
                        var trades = await _repo.GetTradesInDateRangeAsync(chatId, from, DateTime.Now);
                        if (trades.Count == 0)
                        {
                            await bot.SendMessage(chatId, "–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", cancellationToken: cancellationToken);
                        }
                        else
                        {
                            decimal total = trades.Sum(t => t.PnL);
                            string periodName = data == "summary_week" ? "–Ω–µ–¥–µ–ª—é" : "–º–µ—Å—è—Ü";
                            string summary = $"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é {periodName}:\n" +
                                             $"–°–¥–µ–ª–æ–∫: {trades.Count}\n" +
                                             $"–°—É–º–º–∞—Ä–Ω—ã–π PnL: {total}";
                            await bot.SendMessage(chatId, summary, cancellationToken: cancellationToken);
                        }
                    }
                    else if (data == "delete_last")
                    {
                        var lastTrade = await _repo.GetLastTradeAsync(chatId);
                        if (lastTrade == null)
                        {
                            await bot.SendMessage(chatId, "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", cancellationToken: cancellationToken);
                        }
                        else
                        {
                            await _repo.DeleteTradeAsync(lastTrade);
                            await bot.SendMessage(chatId, "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", cancellationToken: cancellationToken);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
                if (update.Type == UpdateType.Message && update.Message != null)
                {
                    long chatId = update.Message.Chat.Id;
                    await bot.SendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", cancellationToken: cancellationToken);
                }
            }
        }
    }
}