// BotService.cs
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Telegram.Bot;
using Microsoft.Extensions.Logging;
using Telegram.Bot.Types;

namespace TradingBot.Services
{
    /// <summary>
    /// –§–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.
    /// </summary>
    public class BotService : BackgroundService
    {
        private readonly ITelegramBotClient _botClient;
        private readonly IServiceProvider _serviceProvider;
        private readonly ILogger<BotService> _logger;

        public BotService(ITelegramBotClient botClient, IServiceProvider serviceProvider, ILogger<BotService> logger)
        {
            _botClient = botClient;
            _serviceProvider = serviceProvider;
            _logger = logger;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
            await _botClient.SetMyCommands(new[]
            {
                new BotCommand { Command = "start", Description = "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ" },
                new BotCommand { Command = "menu", Description = "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" },
                new BotCommand { Command = "help", Description = "üÜò –ü–æ–º–æ—â—å" }
            }, cancellationToken: stoppingToken);

            // –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä UpdateHandler
            var handler = _serviceProvider.GetRequiredService<UpdateHandler>();

            _botClient.StartReceiving(
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                async (bot, update, ct) =>
                {
                    try
                    {
                        await handler.HandleUpdateAsync(bot, update, ct);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
                    }
                },
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                (bot, exception, ct) =>
                {
                    _logger.LogError(exception, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram.");
                    return Task.CompletedTask;
                },
                cancellationToken: stoppingToken
            );

            _logger.LogInformation("Telegram bot started receiving updates.");

            // –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–Ω—ã–º, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω—ã.
            await Task.Delay(Timeout.Infinite, stoppingToken);
        }
    }
}